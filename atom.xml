<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>XhaniのB10g</title>
  
  
  <link href="https://darlingxhani.github.io/atom.xml" rel="self"/>
  
  <link href="https://darlingxhani.github.io/"/>
  <updated>2024-10-31T03:13:04.391Z</updated>
  <id>https://darlingxhani.github.io/</id>
  
  <author>
    <name>Xhani</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>PE文件学习</title>
    <link href="https://darlingxhani.github.io/2024/10/30/PE%E6%96%87%E4%BB%B6%E5%AD%A6%E4%B9%A0/"/>
    <id>https://darlingxhani.github.io/2024/10/30/PE%E6%96%87%E4%BB%B6%E5%AD%A6%E4%B9%A0/</id>
    <published>2024-10-30T12:12:54.000Z</published>
    <updated>2024-10-31T03:13:04.391Z</updated>
    
    <content type="html"><![CDATA[<h2 id="PE-文件的学习："><a href="#PE-文件的学习：" class="headerlink" title="PE 文件的学习："></a>PE 文件的学习：</h2><h3 id="1-了解"><a href="#1-了解" class="headerlink" title="1.了解"></a>1.了解</h3><p>PE（ Portable Execute）文件是Windows下可执行文件的总称，常见的有 <strong>DLL，EXE，OCX，SYS</strong> 等。它是微软在 UNIX 平台的 COFF（通用对象文件格式）基础上制作而成。<strong>最初设计用来提高程序在不同操作系统上的移植性，但实际上这种文件格式仅用在 Windows 系列操作系统下</strong>。**PE文件是指 32 位可执行文件，也称为PE32。64位的可执行文件称为 PE+ 或 PE32+，是PE(PE32)的一种扩展形式（请注意不是PE64)**。</p><p>事实上，<strong>一个文件是否是 PE 文件与其扩展名无关</strong>，PE文件可以是任何扩展名。那 Windows 是怎么区分可执行文件和非可执行文件的呢？我们调用 LoadLibrary 传递了一个文件名，<strong>系统是如何判断这个文件是一个合法的动态库呢？这就涉及到PE文件结构了。</strong></p><img src="/2024/10/30/PE%E6%96%87%E4%BB%B6%E5%AD%A6%E4%B9%A0/2.png" class><h3 id="2-结构学习"><a href="#2-结构学习" class="headerlink" title="2.结构学习"></a>2.结构学习</h3><h3 id="一、DOS头"><a href="#一、DOS头" class="headerlink" title="一、DOS头"></a>一、DOS头</h3><p>DOS头 的作用是兼容 MS-DOS 操作系统中的可执行文件，对于 32位PE文件来说，DOS 所起的作用就是显示一行文字，提示用户：我需要在32位windows上才可以运行。我认为这是个善意的玩笑，因为他并不像显示的那样不能运行，其实已经运行了，只是在 DOS 上没有干用户希望看到的工作而已，好吧，我承认这不是重点。但是，至少我们看一下这个头是如何定义的：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IMAGE_DOS_HEADER</span> &#123;</span>      <span class="comment">// DOS .EXE header</span></span><br><span class="line">    WORD   e_magic;                     <span class="comment">// Magic number</span></span><br><span class="line">    WORD   e_cblp;                      <span class="comment">// Bytes on last page of file</span></span><br><span class="line">    WORD   e_cp;                        <span class="comment">// Pages in file</span></span><br><span class="line">    WORD   e_crlc;                      <span class="comment">// Relocations</span></span><br><span class="line">    WORD   e_cparhdr;                   <span class="comment">// Size of header in paragraphs</span></span><br><span class="line">    WORD   e_minalloc;                  <span class="comment">// Minimum extra paragraphs needed</span></span><br><span class="line">    WORD   e_maxalloc;                  <span class="comment">// Maximum extra paragraphs needed</span></span><br><span class="line">    WORD   e_ss;                        <span class="comment">// Initial (relative) SS value</span></span><br><span class="line">    WORD   e_sp;                        <span class="comment">// Initial SP value</span></span><br><span class="line">    WORD   e_csum;                      <span class="comment">// Checksum</span></span><br><span class="line">    WORD   e_ip;                        <span class="comment">// Initial IP value</span></span><br><span class="line">    WORD   e_cs;                        <span class="comment">// Initial (relative) CS value</span></span><br><span class="line">    WORD   e_lfarlc;                    <span class="comment">// File address of relocation table</span></span><br><span class="line">    WORD   e_ovno;                      <span class="comment">// Overlay number</span></span><br><span class="line">    WORD   e_res[<span class="number">4</span>];                    <span class="comment">// Reserved words</span></span><br><span class="line">    WORD   e_oemid;                     <span class="comment">// OEM identifier (for e_oeminfo)</span></span><br><span class="line">    WORD   e_oeminfo;                   <span class="comment">// OEM information; e_oemid specific</span></span><br><span class="line">    WORD   e_res2[<span class="number">10</span>];                  <span class="comment">// Reserved words</span></span><br><span class="line">    LONG   e_lfanew;                    <span class="comment">// File address of new exe header</span></span><br><span class="line">  &#125; IMAGE_DOS_HEADER, *PIMAGE_DOS_HEADER;</span><br></pre></td></tr></table></figure><img src="/2024/10/30/PE%E6%96%87%E4%BB%B6%E5%AD%A6%E4%B9%A0/1.png" class><h3 id="二、NT头"><a href="#二、NT头" class="headerlink" title="二、NT头"></a>二、NT头</h3><p>顺着 DOS 头中的 <strong>e_lfanew</strong>，我们很容易可以找到 <strong>NT头，这个才是 32位PE文件中最有用的头</strong>，定义如下:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IMAGE_NT_HEADERS</span> &#123;</span></span><br><span class="line">    DWORD Signature;</span><br><span class="line">    IMAGE_FILE_HEADER FileHeader;</span><br><span class="line">    IMAGE_OPTIONAL_HEADER32 OptionalHeader;</span><br><span class="line">&#125; IMAGE_NT_HEADERS32, *PIMAGE_NT_HEADERS32;</span><br></pre></td></tr></table></figure><h5 id="1-Signature"><a href="#1-Signature" class="headerlink" title="1.Signature"></a>1.Signature</h5><p>类似于 DOS头中的 e_magic，其高16位是0，低16是0x4550，用字符表示是 ‘PE‘ 。⭐⭐⭐</p><h5 id="2-IMAGE-FILE-HEADER-文件头"><a href="#2-IMAGE-FILE-HEADER-文件头" class="headerlink" title="2.IMAGE_FILE_HEADER(文件头)"></a>2.IMAGE_FILE_HEADER(文件头)</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IMAGE_FILE_HEADER</span> &#123;</span></span><br><span class="line">    WORD    Machine;</span><br><span class="line">    WORD    NumberOfSections;⭐⭐⭐</span><br><span class="line">    DWORD   TimeDateStamp;</span><br><span class="line">    DWORD   PointerToSymbolTable;</span><br><span class="line">    DWORD   NumberOfSymbols;</span><br><span class="line">    WORD    SizeOfOptionalHeader;</span><br><span class="line">    WORD    Characteristics;</span><br><span class="line">&#125; IMAGE_FILE_HEADER, *PIMAGE_FILE_HEADER;</span><br></pre></td></tr></table></figure><p>Machine：该文件的运行平台，是 x86、x64 还是 I64 等等；</p><p><u>NumberOfSections：   该PE文件中有多少个节，也就是节表中的项数。</u><br>TimeDateStamp：      PE文件的创建时间，一般有连接器填写。<br>PointerToSymbolTable： COFF文件符号表在文件中的偏移。<br>NumberOfSymbols：    符号表的数量。<br>SizeOfOptionalHeader： 紧随其后的可选头的大小。<br>Characteristics：       可执行文件的属性</p><h5 id="3-IMAGE-OPTIONAL-HEADER-可选头"><a href="#3-IMAGE-OPTIONAL-HEADER-可选头" class="headerlink" title="3.IMAGE_OPTIONAL_HEADER(可选头)"></a>3.IMAGE_OPTIONAL_HEADER(可选头)</h5><p><em><strong>别看他名字叫可选头，其实一点都不能少，不过，它在不同的平台下是不一样的，例如32位下是IMAGE_OPTIONAL_HEADER32，而在64位下是IMAGE_OPTIONAL_HEADER64。为了简单起见，我们只看32位。</strong></em></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IMAGE_OPTIONAL_HEADER</span> &#123;</span></span><br><span class="line">    WORD    Magic;</span><br><span class="line">    BYTE    MajorLinkerVersion;</span><br><span class="line">    BYTE    MinorLinkerVersion;</span><br><span class="line">    DWORD   SizeOfCode;</span><br><span class="line">    DWORD   SizeOfInitializedData;</span><br><span class="line">    DWORD   SizeOfUninitializedData;</span><br><span class="line">    DWORD   AddressOfEntryPoint;</span><br><span class="line">    DWORD   BaseOfCode;</span><br><span class="line">    DWORD   BaseOfData;</span><br><span class="line">    DWORD   ImageBase;</span><br><span class="line">    DWORD   SectionAlignment;  ⭐⭐⭐</span><br><span class="line">    DWORD   FileAlignment;  ⭐⭐⭐</span><br><span class="line">    WORD    MajorOperatingSystemVersion;</span><br><span class="line">    WORD    MinorOperatingSystemVersion;</span><br><span class="line">    WORD    MajorImageVersion;</span><br><span class="line">    WORD    MinorImageVersion;</span><br><span class="line">    WORD    MajorSubsystemVersion;</span><br><span class="line">    WORD    MinorSubsystemVersion;</span><br><span class="line">    DWORD   Win32VersionValue;</span><br><span class="line">    DWORD   SizeOfImage;</span><br><span class="line">    DWORD   SizeOfHeaders;</span><br><span class="line">    DWORD   CheckSum;</span><br><span class="line">    WORD    Subsystem;</span><br><span class="line">    WORD    DllCharacteristics;</span><br><span class="line">    DWORD   SizeOfStackReserve;</span><br><span class="line">    DWORD   SizeOfStackCommit;</span><br><span class="line">    DWORD   SizeOfHeapReserve;</span><br><span class="line">    DWORD   SizeOfHeapCommit;</span><br><span class="line">    DWORD   LoaderFlags;</span><br><span class="line">    DWORD   NumberOfRvaAndSizes;</span><br><span class="line">    IMAGE_DATA_DIRECTORY DataDirectory[IMAGE_NUMBEROF_DIRECTORY_ENTRIES];</span><br><span class="line">&#125; IMAGE_OPTIONAL_HEADER32, *PIMAGE_OPTIONAL_HEADER32;</span><br></pre></td></tr></table></figure><ul><li><p><strong>Magic</strong>：表示可选头的类型。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> IMAGE_NT_OPTIONAL_HDR32_MAGIC      0x10b  <span class="comment">// 32位PE可选头</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> IMAGE_NT_OPTIONAL_HDR64_MAGIC      0x20b  <span class="comment">// 64位PE可选头</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> IMAGE_ROM_OPTIONAL_HDR_MAGIC       0x107  </span></span><br></pre></td></tr></table></figure></li><li><p><strong>MajorLinkerVersion</strong> 和 <strong>MinorLinkerVersion</strong>：链接器的版本号。</p></li><li><p><strong>SizeOfCode</strong>：代码段的长度，如果有多个代码段，则是代码段长度的总和。</p></li><li><p><strong>SizeOfInitializedData</strong>：初始化的数据长度。</p></li><li><p><strong>SizeOfUninitializedData</strong>：未初始化的数据长度。</p></li><li><p><strong>AddressOfEntryPoint：程序入口的 RVA，对于exe这个地址可以理解为WinMain的RVA。对于DLL，这个地址可以理解为DllMain的RVA，如果是驱动程序，可以理解为DriverEntry的RVA。当然，实际上入口点并非是WinMain，DllMain和DriverEntry，在这些函数之前还有一系列初始化要完成，当然，这些不是本文的重点。</strong>⭐⭐⭐</p></li><li><p><strong>BaseOfCode</strong>：代码段起始地址的RVA。</p></li><li><p><strong>BaseOfData</strong>：数据段起始地址的RVA。</p></li><li><p><strong>ImageBase</strong>：映象（加载到内存中的PE文件）的基地址，这个基地址是建议，对于DLL来说，如果无法加载到这个地址，系统会自动为其选择地址。⭐⭐⭐</p></li><li><p><strong>SectionAlignment</strong>：节对齐，PE中的节被加载到内存时会按照这个域指定的值来对齐，比如这个值是0x1000，那么每个节的起始地址的低12位都为0。⭐⭐⭐</p></li><li><p><strong>FileAlignment</strong>：节在文件中按此值对齐，SectionAlignment必须大于或等于FileAlignment。</p></li><li><p><strong>MajorOperatingSystemVersion</strong>、MinorOperatingSystemVersion：所需操作系统的版本号，随着操作系统版本越来越多，这个好像不是那么重要了。</p></li><li><p><strong>MajorImageVersion</strong>、<strong>MinorImageVersion</strong>：映象的版本号，这个是开发者自己指定的，由连接器填写。</p></li><li><p><strong>MajorSubsystemVersion</strong>、<strong>MinorSubsystemVersion</strong>：所需子系统版本号。</p></li><li><p><strong>Win32VersionValue</strong>：保留，必须为0。</p></li><li><p><strong>SizeOfImage</strong>：映象的大小，PE文件加载到内存中空间是连续的，这个值指定占用虚拟空间的大小。</p></li><li><p><strong>SizeOfHeaders</strong>：所有文件头（包括节表）的大小，这个值是以FileAlignment对齐的。</p></li><li><p><strong>CheckSum</strong>：映象文件的校验和。</p></li><li><p><strong>Subsystem</strong>：运行该PE文件所需的子系统。</p></li><li><p><strong>SizeOfStackReserve</strong>：运行时为每个线程栈保留内存的大小。</p></li><li><p><strong>SizeOfStackCommit</strong>：运行时每个线程栈初始占用内存大小。</p></li><li><p><strong>SizeOfHeapReserve</strong>：运行时为进程堆保留内存大小。</p></li><li><p><strong>SizeOfHeapCommit</strong>：运行时进程堆初始占用内存大小。</p></li><li><p><strong>LoaderFlags</strong>：保留，必须为0。</p></li><li><p><strong>NumberOfRvaAndSizes</strong>：数据目录的项数，即下面这个数组的项数。</p></li><li><p>⭐⭐⭐⭐⭐<strong>DataDirectory</strong>：数据目录，这是一个数组，数组的项定义如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IMAGE_DATA_DIRECTORY</span> &#123;</span></span><br><span class="line">    DWORD   VirtualAddress; <span class="comment">//是一个RVA的偏移地址</span></span><br><span class="line">    DWORD   Size; <span class="comment">// 对应表的大小</span></span><br><span class="line">&#125; IMAGE_DATA_DIRECTORY, *PIMAGE_DATA_DIRECTORY;</span><br></pre></td></tr></table></figure><p>这两个数有什么用呢 ？<strong>一个是地址，一个是大小，可以看出这个数据目录项定义的是一个区域</strong>。<strong>那他定义的是什么东西的区域呢？</strong>前面说了，<strong>DataDirectory 是个数组</strong>，<strong>数组中的每一项对应一个特定的数据结构</strong>，<strong>包括导入表，导出表等等</strong>，<strong>根据不同的索引取出来的是不同的结构</strong>，头文件里定义各个项表示哪个结构，如下面的代码所示:</p></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> IMAGE_DIRECTORY_ENTRY_EXPORT          0   <span class="comment">// Export Directory ⭐⭐⭐   </span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> IMAGE_DIRECTORY_ENTRY_IMPORT          1   <span class="comment">// Import Directory  ⭐⭐⭐</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> IMAGE_DIRECTORY_ENTRY_RESOURCE        2   <span class="comment">// Resource Directory</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> IMAGE_DIRECTORY_ENTRY_EXCEPTION       3   <span class="comment">// Exception Directory</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> IMAGE_DIRECTORY_ENTRY_SECURITY        4   <span class="comment">// Security Directory</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> IMAGE_DIRECTORY_ENTRY_BASERELOC       5   <span class="comment">// Base Relocation Table</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> IMAGE_DIRECTORY_ENTRY_DEBUG           6   <span class="comment">// Debug Directory</span></span></span><br><span class="line"><span class="comment">//      IMAGE_DIRECTORY_ENTRY_COPYRIGHT       7   // (X86 usage)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> IMAGE_DIRECTORY_ENTRY_ARCHITECTURE    7   <span class="comment">// Architecture Specific Data</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> IMAGE_DIRECTORY_ENTRY_GLOBALPTR       8   <span class="comment">// RVA of GP</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> IMAGE_DIRECTORY_ENTRY_TLS             9   <span class="comment">// TLS Directory   ⭐⭐</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> IMAGE_DIRECTORY_ENTRY_LOAD_CONFIG    10   <span class="comment">// Load Configuration Directory</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> IMAGE_DIRECTORY_ENTRY_BOUND_IMPORT   11   <span class="comment">// Bound Import Directory in headers</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> IMAGE_DIRECTORY_ENTRY_IAT            12   <span class="comment">// Import Address Table  ⭐⭐  //IAT</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> IMAGE_DIRECTORY_ENTRY_DELAY_IMPORT   13   <span class="comment">// Delay Load Import Descriptors</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> IMAGE_DIRECTORY_ENTRY_COM_DESCRIPTOR 14   <span class="comment">// COM Runtime descriptor</span></span></span><br></pre></td></tr></table></figure><h3 id="三-IMAGE-SECTION-HEADER（节表）"><a href="#三-IMAGE-SECTION-HEADER（节表）" class="headerlink" title="三.IMAGE_SECTION_HEADER（节表）"></a>三.IMAGE_SECTION_HEADER（节表）</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IMAGE_SECTION_HEADER</span> &#123;</span></span><br><span class="line">    Name<span class="comment">//8个字节的块名</span></span><br><span class="line">    <span class="class"><span class="keyword">union</span></span></span><br><span class="line"><span class="class">    &#123;</span></span><br><span class="line">        DWORD PhysicalAddress;</span><br><span class="line">        DWORD VirtualSize;</span><br><span class="line">    &#125; Misc;                     <span class="comment">//区块尺寸</span></span><br><span class="line">    DWORD VirtualAddress;<span class="comment">//区块的RVA地址</span></span><br><span class="line">    DWORD SizeOfRawData;<span class="comment">//在文件中对齐后的尺寸</span></span><br><span class="line">    DWORD PointerToRawData;<span class="comment">//在文件中偏移</span></span><br><span class="line">    DWORD PointerToRelocations;<span class="comment">//在OBJ文件中使用，重定位的偏移</span></span><br><span class="line">    DWORD PointerToLinenumbers;<span class="comment">//行号表的偏移（供调试使用地）</span></span><br><span class="line">    WORD NumberOfRelocations;<span class="comment">//在OBJ文件中使用，重定位项数目</span></span><br><span class="line">    WORD NumberOfLinenumbers;<span class="comment">//行号表中行号的数目</span></span><br><span class="line">    DWORD Characteristics;<span class="comment">//区块属性如可读，可写，可执行等</span></span><br><span class="line">&#125; IMAGE_SECTION_HEADER, *PIMAGE_SECTION_HEADER;</span><br></pre></td></tr></table></figure><h3 id="四-节"><a href="#四-节" class="headerlink" title="四.节"></a>四.节</h3><p>每个区块的名称都是唯一的，不能有同名的两个区块。<br>但事实上节的名称不表示任何含义，他的存在仅仅是为了正规统一编程的时候方便程序员查看方便而设置的一个标记而已。所以将包含代码的区块命名为“.Data” （一般为.text）或者说将包含数据的区块命名为“.Code”（一般为.rdata等） 都是合法的。<br>当我们要从PE 文件中读取需要的区块的时候，不能以区块的名称作为定位的标准和依据，正确方法是</p><p>在节头（<code>IMAGE_SECTION_HEADER</code>）中。要定位节的地址，你可以按照以下步骤进行：</p><ol><li><strong>获取文件头</strong>：从 PE 文件的起始部分读取 DOS 头（<code>IMAGE_DOS_HEADER</code>），然后找到 PE 头的位置。</li><li><strong>读取可选头</strong>：从 PE 头中读取可选头（<code>IMAGE_OPTIONAL_HEADER32</code>），确认文件类型（如 PE32）。</li><li><strong>读取节表</strong>：可选头后面会跟着一个或多个节头。节头的数量在可选头中指定，通常可以通过 <code>NumberOfSections</code> 字段获取。</li><li><strong>计算节的地址</strong>：每个节头都有一个 <code>VirtualAddress</code> 字段，表示该节在内存中的地址。你可以通过遍历节头来查找特定节的信息。</li><li><strong>加载地址</strong>：当 PE 文件被加载到内存中时，你可以将 <code>VirtualAddress</code> 和基址相加，以确定节的实际内存地址。</li></ol><p>各种节的描述：</p><img src="/2024/10/30/PE%E6%96%87%E4%BB%B6%E5%AD%A6%E4%B9%A0/3.png" class><h3 id="五-其他注意"><a href="#五-其他注意" class="headerlink" title="五.其他注意"></a>五.其他注意</h3><h5 id="1-RVA-和文件偏移换算"><a href="#1-RVA-和文件偏移换算" class="headerlink" title="1.RVA 和文件偏移换算"></a>1.RVA 和文件偏移换算</h5><p>在 PE 文件格式中，RVA（Relative Virtual Address）和文件偏移之间的换算是非常重要的。以下是相关术语和它们在 PE 文件结构中的定义，以及如何进行换算的方法：</p><h3 id="术语及其定义"><a href="#术语及其定义" class="headerlink" title="术语及其定义"></a>术语及其定义</h3><ol><li><p><strong>RVA（Relative Virtual Address）</strong>：</p><ul><li><strong>定义</strong>：相对虚拟地址，是指某个节或数据在内存中的相对地址，通常是相对于加载基址（<code>ImageBase</code>）的偏移。</li><li><strong>结构</strong>：在 <code>IMAGE_SECTION_HEADER</code> 中的 <code>VirtualAddress</code> 字段。</li></ul></li><li><p><strong>FOA（File Offset Address）</strong>：</p><ul><li><strong>定义</strong>：文件偏移地址，指的是文件中某个特定数据或结构的偏移位置。</li><li><strong>结构</strong>：在 <code>IMAGE_SECTION_HEADER</code> 中的 <code>PointerToRawData</code> 字段。</li></ul></li><li><p><strong>ImageBase</strong>：</p><ul><li><strong>定义</strong>：基址，指 PE 文件在内存中加载时的起始地址。</li><li><strong>结构</strong>：在 <code>IMAGE_OPTIONAL_HEADER</code> 中的 <code>ImageBase</code> 字段。</li></ul></li></ol><h3 id="RVA-与-FOA-之间的换算"><a href="#RVA-与-FOA-之间的换算" class="headerlink" title="RVA 与 FOA 之间的换算"></a>RVA 与 FOA 之间的换算</h3><h4 id="1-从-RVA-转换到-FOA"><a href="#1-从-RVA-转换到-FOA" class="headerlink" title="1. 从 RVA 转换到 FOA"></a>1. 从 RVA 转换到 FOA</h4><p>给定一个 RVA，可以使用以下公式转换为 FOA：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FOA = RVA - Section.VirtualAddress + Section.PointerToRawData</span><br></pre></td></tr></table></figure><ul><li><strong>解释</strong>：<ul><li><code>Section.VirtualAddress</code>：对应节头中的 <code>VirtualAddress</code> 字段。</li><li><code>Section.PointerToRawData</code>：对应节头中的 <code>PointerToRawData</code> 字段。</li></ul></li></ul><h4 id="2-从-FOA-转换到-RVA"><a href="#2-从-FOA-转换到-RVA" class="headerlink" title="2. 从 FOA 转换到 RVA"></a>2. 从 FOA 转换到 RVA</h4><p>给定一个 FOA，可以使用以下公式转换为 RVA：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">RVA = FOA - Section.PointerToRawData + Section.VirtualAddress</span><br></pre></td></tr></table></figure><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>假设有以下节头信息：</p><ul><li><strong>节名</strong>：<code>.text</code></li><li><strong>VirtualAddress</strong>：<code>0x1000</code></li><li><strong>PointerToRawData</strong>：<code>0x200</code></li></ul><p>那么，对于某个特定的 RVA <code>0x1010</code>，可以计算 FOA 如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FOA = 0x1010 - 0x1000 + 0x200 = 0x210</span><br></pre></td></tr></table></figure><p>如果要将 FOA <code>0x210</code> 转换回 RVA：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">RVA = 0x210 - 0x200 + 0x1000 = 0x1010</span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li><strong>RVA</strong> 是节在内存中的相对虚拟地址。</li><li><strong>FOA</strong> 是节在文件中的具体偏移。</li><li>使用 <code>IMAGE_SECTION_HEADER</code> 中的 <code>VirtualAddress</code> 和 <code>PointerToRawData</code> 字段进行 RVA 和 FOA 之间的换算。</li></ul><p>这些计算在 PE 文件的解析、调试和分析中是非常重要的，理解这些术语及其对应的结构定义将有助于处理 PE 文件格式。</p><p><strong><u>同时计算时也要考虑对齐会对RVA 与 FOA 之间的换算影响</u></strong></p><p>节对齐和文件对齐是 PE 文件格式中两个重要的概念，它们的主要区别如下：</p><h3 id="节对齐（Section-Alignment）"><a href="#节对齐（Section-Alignment）" class="headerlink" title="节对齐（Section Alignment）"></a>节对齐（Section Alignment）</h3><ol><li><p><strong>定义</strong>：</p><ul><li>节对齐是指在 PE 文件加载到内存中时，节在内存中的对齐要求。它决定了每个节的起始地址必须是某个特定值的倍数。</li></ul></li><li><p><strong>位置</strong>：</p><ul><li>节对齐的值在 <code>IMAGE_OPTIONAL_HEADER</code> 结构中，字段名称为 <code>SectionAlignment</code>。</li></ul></li><li><p><strong>作用</strong>：</p><ul><li>确保加载到内存中的节按页对齐，以优化内存访问和提高性能。通常，<code>SectionAlignment</code> 的值为 4096 字节（一个内存页的大小）。</li></ul></li><li><p><strong>加载时的对齐</strong>：</p><ul><li>节对齐是在 PE 文件加载到内存后生效的。加载过程会根据 <code>SectionAlignment</code> 进行调整。</li></ul></li></ol><h3 id="文件对齐（File-Alignment）"><a href="#文件对齐（File-Alignment）" class="headerlink" title="文件对齐（File Alignment）"></a>文件对齐（File Alignment）</h3><ol><li><p><strong>定义</strong>：</p><ul><li>文件对齐是指在 PE 文件中，节在文件中的对齐要求。它决定了每个节在文件中开始的位置必须是某个特定值的倍数。</li></ul></li><li><p><strong>位置</strong>：</p><ul><li>文件对齐的值同样在 <code>IMAGE_OPTIONAL_HEADER</code> 结构中，字段名称为 <code>FileAlignment</code>。</li></ul></li><li><p><strong>作用</strong>：</p><ul><li>确保在 PE 文件中，节的起始位置按照 <code>FileAlignment</code> 对齐，以便于文件的读取和解析。通常，<code>FileAlignment</code> 的值为 512 字节或 4096 字节。</li></ul></li><li><p><strong>未加载时的对齐</strong>：</p><ul><li>文件对齐是在 PE 文件未加载时适用的。它影响文件的存储格式，而不是内存中的布局。</li></ul></li></ol><h3 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h3><ul><li><strong>节对齐</strong>：适用于 PE 文件加载到内存后的内存布局，确保节按页对齐。</li><li><strong>文件对齐</strong>：适用于 PE 文件的存储格式，确保节在文件中按字节对齐。</li></ul><p>因此，节对齐和文件对齐是针对不同上下文的对齐要求，它们的值和作用有所不同。</p><h4 id="2-PE文件与内存映射"><a href="#2-PE文件与内存映射" class="headerlink" title="2.PE文件与内存映射"></a>2.PE文件与内存映射</h4><p><strong>就是把</strong> <strong>PE 文件</strong> <strong>从</strong> <strong>硬盘中</strong> <strong>放到</strong> *<em>内存中</em>***，然后 CPU 从 内存中读取指令并执行。</p><img src="/2024/10/30/PE%E6%96%87%E4%BB%B6%E5%AD%A6%E4%B9%A0/a.png" class><img src="/2024/10/30/PE%E6%96%87%E4%BB%B6%E5%AD%A6%E4%B9%A0/7.png" class><p><strong>文件中使用偏移（offset），内存中使用 VA（Virtual Address，虚拟地址）来表示位置。</strong></p><p><strong>VA 指进程虚拟内存的绝对地址</strong>，<strong>RVA(Relative Virtual Address，相对虚拟地址)是指从某基准位置（ImageBase）开始的相对地址</strong>。VA 与 RVA 满足下面的换算关系： <strong>RVA + ImageBase &#x3D; VA</strong></p><hr><p>PE 头内部信息大多是 RVA 形式存在。<br>原因在于（主要是DLL）加载到进程虚拟内存的特定位置时，该位置可能已经加载了其他的 PE文件（DLL）。<br>此时必须通过重定向（Relocation）将其加载到其他空白的位置，若 PE头信息使用的是 VA，则无法正常访问。<br>因此使用 RVA 来重定向信息，即使发生了重定向，只要相对于基准位置的相对位置没有变化，就能正常访问到指定信息，不会出现任何问题。</p><hr><p>**当 PE 文件被执行时，PE 装载器会为 *<em>进程*</em> 分配 4GB 的 *<em>虚拟地址空间*</em>*<em>（ Virtual address spaces 官方文档：*</em>*<em><a href="https://docs.microsoft.com/zh-tw/windows-hardware/drivers/gettingstarted/virtual-address-spaces/">https://docs.microsoft.com/zh-tw/windows-hardware/drivers/gettingstarted/virtual-address-spaces\</a>*</em> *<em>）*<em>，然后把程序所占用的磁盘空间作为虚拟内存映射到这个4GB的虚拟地址空间中。一般情况下，会映射到 *<em>虚拟地址空间*</em> 中的 0X400000的位置。</em></em></p><img src="/2024/10/30/PE%E6%96%87%E4%BB%B6%E5%AD%A6%E4%B9%A0/f.png" class><h3 id="Last"><a href="#Last" class="headerlink" title="Last"></a>Last</h3><p>写的PE文件分析器🌃🌃🌃</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">PrintDataDirectory</span><span class="params">(IMAGE_DATA_DIRECTORY dir, <span class="type">const</span> <span class="type">char</span>* name)</span> </span>&#123;</span><br><span class="line">    cout &lt;&lt; name &lt;&lt; <span class="string">&quot; - RVA: 0x&quot;</span> &lt;&lt; hex &lt;&lt; dir.VirtualAddress &lt;&lt; <span class="string">&quot;, Size: 0x&quot;</span> &lt;&lt; dir.Size &lt;&lt; dec &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ParsePEFile</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* filePath)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 打开文件</span></span><br><span class="line">    <span class="function">ifstream <span class="title">file</span><span class="params">(filePath, ios::binary | ios::in)</span></span>;</span><br><span class="line">    <span class="keyword">if</span> (!file) &#123;</span><br><span class="line">        cerr &lt;&lt; <span class="string">&quot;无法打开文件: &quot;</span> &lt;&lt; filePath &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 读取DOS头</span></span><br><span class="line">    IMAGE_DOS_HEADER dosHeader;</span><br><span class="line">    file.<span class="built_in">read</span>(<span class="built_in">reinterpret_cast</span>&lt;<span class="type">char</span>*&gt;(&amp;dosHeader), <span class="built_in">sizeof</span>(IMAGE_DOS_HEADER));</span><br><span class="line">    <span class="keyword">if</span> (dosHeader.e_magic != IMAGE_DOS_SIGNATURE) &#123;</span><br><span class="line">        cerr &lt;&lt; <span class="string">&quot;不是有效的PE文件&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 跳转到PE头</span></span><br><span class="line">    file.<span class="built_in">seekg</span>(dosHeader.e_lfanew, ios::beg);</span><br><span class="line">    DWORD signature;</span><br><span class="line">    file.<span class="built_in">read</span>(<span class="built_in">reinterpret_cast</span>&lt;<span class="type">char</span>*&gt;(&amp;signature), <span class="built_in">sizeof</span>(DWORD));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (signature != IMAGE_NT_SIGNATURE) &#123;</span><br><span class="line">        cerr &lt;&lt; <span class="string">&quot;PE签名无效&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 读取文件头</span></span><br><span class="line">    IMAGE_FILE_HEADER fileHeader;</span><br><span class="line">    file.<span class="built_in">read</span>(<span class="built_in">reinterpret_cast</span>&lt;<span class="type">char</span>*&gt;(&amp;fileHeader), <span class="built_in">sizeof</span>(IMAGE_FILE_HEADER));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 读取可选头（32位/64位）</span></span><br><span class="line">    IMAGE_OPTIONAL_HEADER optionalHeader;</span><br><span class="line">    file.<span class="built_in">read</span>(<span class="built_in">reinterpret_cast</span>&lt;<span class="type">char</span>*&gt;(&amp;optionalHeader), <span class="built_in">sizeof</span>(IMAGE_OPTIONAL_HEADER));</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;PE文件解析：&quot;</span> &lt;&lt; filePath &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;-----------------------------------&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 输出加载基地址、入口地址</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;加载基地址: 0x&quot;</span> &lt;&lt; hex &lt;&lt; optionalHeader.ImageBase &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;入口地址: 0x&quot;</span> &lt;&lt; hex &lt;&lt; optionalHeader.AddressOfEntryPoint &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断是否启用了DEP、ASLR、控制流保护、SEH</span></span><br><span class="line">    <span class="type">bool</span> depEnabled = (optionalHeader.DllCharacteristics &amp; IMAGE_DLLCHARACTERISTICS_NX_COMPAT);</span><br><span class="line">    <span class="type">bool</span> aslrEnabled = (optionalHeader.DllCharacteristics &amp; IMAGE_DLLCHARACTERISTICS_DYNAMIC_BASE);</span><br><span class="line">    <span class="type">bool</span> cfGuardEnabled = (optionalHeader.DllCharacteristics &amp; IMAGE_DLLCHARACTERISTICS_GUARD_CF);</span><br><span class="line">    <span class="type">bool</span> sehEnabled = !(fileHeader.Characteristics &amp; IMAGE_FILE_DLL); <span class="comment">// SEH一般禁用DLL</span></span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;DEP启用: &quot;</span> &lt;&lt; (depEnabled ? <span class="string">&quot;是&quot;</span> : <span class="string">&quot;否&quot;</span>) &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;ASLR启用: &quot;</span> &lt;&lt; (aslrEnabled ? <span class="string">&quot;是&quot;</span> : <span class="string">&quot;否&quot;</span>) &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;控制流保护启用: &quot;</span> &lt;&lt; (cfGuardEnabled ? <span class="string">&quot;是&quot;</span> : <span class="string">&quot;否&quot;</span>) &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;SEH启用: &quot;</span> &lt;&lt; (sehEnabled ? <span class="string">&quot;是&quot;</span> : <span class="string">&quot;否&quot;</span>) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 输出数据目录项信息</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;-----------------------------------&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;数据目录项:&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">PrintDataDirectory</span>(optionalHeader.DataDirectory[IMAGE_DIRECTORY_ENTRY_EXPORT], <span class="string">&quot;Export Table&quot;</span>);</span><br><span class="line">    <span class="built_in">PrintDataDirectory</span>(optionalHeader.DataDirectory[IMAGE_DIRECTORY_ENTRY_IMPORT], <span class="string">&quot;Import Table&quot;</span>);</span><br><span class="line">    <span class="built_in">PrintDataDirectory</span>(optionalHeader.DataDirectory[IMAGE_DIRECTORY_ENTRY_RESOURCE], <span class="string">&quot;Resource Table&quot;</span>);</span><br><span class="line">    <span class="built_in">PrintDataDirectory</span>(optionalHeader.DataDirectory[IMAGE_DIRECTORY_ENTRY_EXCEPTION], <span class="string">&quot;Exception Table&quot;</span>);</span><br><span class="line">    <span class="built_in">PrintDataDirectory</span>(optionalHeader.DataDirectory[IMAGE_DIRECTORY_ENTRY_SECURITY], <span class="string">&quot;Security Table&quot;</span>);</span><br><span class="line">    <span class="built_in">PrintDataDirectory</span>(optionalHeader.DataDirectory[IMAGE_DIRECTORY_ENTRY_BASERELOC], <span class="string">&quot;Base Relocation Table&quot;</span>);</span><br><span class="line">    <span class="built_in">PrintDataDirectory</span>(optionalHeader.DataDirectory[IMAGE_DIRECTORY_ENTRY_DEBUG], <span class="string">&quot;Debug Directory&quot;</span>);</span><br><span class="line">    <span class="built_in">PrintDataDirectory</span>(optionalHeader.DataDirectory[IMAGE_DIRECTORY_ENTRY_TLS], <span class="string">&quot;TLS Table&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 输出所有节的名字、相对偏移、大小</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;-----------------------------------&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;节信息:&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    file.<span class="built_in">seekg</span>(dosHeader.e_lfanew + <span class="built_in">sizeof</span>(DWORD) + <span class="built_in">sizeof</span>(IMAGE_FILE_HEADER) + fileHeader.SizeOfOptionalHeader, ios::beg);</span><br><span class="line">    IMAGE_SECTION_HEADER sectionHeader;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; fileHeader.NumberOfSections; i++) &#123;</span><br><span class="line">        file.<span class="built_in">read</span>(<span class="built_in">reinterpret_cast</span>&lt;<span class="type">char</span>*&gt;(&amp;sectionHeader), <span class="built_in">sizeof</span>(IMAGE_SECTION_HEADER));</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;节名: &quot;</span> &lt;&lt; <span class="built_in">string</span>(<span class="built_in">reinterpret_cast</span>&lt;<span class="type">char</span>*&gt;(sectionHeader.Name), <span class="number">8</span>) &lt;&lt; endl;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;相对虚拟地址: 0x&quot;</span> &lt;&lt; hex &lt;&lt; sectionHeader.VirtualAddress &lt;&lt; endl;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;大小: 0x&quot;</span> &lt;&lt; hex &lt;&lt; sectionHeader.Misc.VirtualSize &lt;&lt; dec &lt;&lt; endl;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;-----------------------------------&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    file.<span class="built_in">close</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (argc != <span class="number">2</span>) &#123;</span><br><span class="line">        cerr &lt;&lt; <span class="string">&quot;用法: &quot;</span> &lt;&lt; argv[<span class="number">0</span>] &lt;&lt; <span class="string">&quot; &lt;PE文件路径&gt;&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">ParsePEFile</span>(argv[<span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">使用命令:./pe.exe target.exe</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;PE-文件的学习：&quot;&gt;&lt;a href=&quot;#PE-文件的学习：&quot; class=&quot;headerlink&quot; title=&quot;PE 文件的学习：&quot;&gt;&lt;/a&gt;PE 文件的学习：&lt;/h2&gt;&lt;h3 id=&quot;1-了解&quot;&gt;&lt;a href=&quot;#1-了解&quot; class=&quot;headerli</summary>
      
    
    
    
    
    <category term="PE" scheme="https://darlingxhani.github.io/tags/PE/"/>
    
  </entry>
  
  <entry>
    <title>Inline_hook</title>
    <link href="https://darlingxhani.github.io/2024/10/29/Inline-hook/"/>
    <id>https://darlingxhani.github.io/2024/10/29/Inline-hook/</id>
    <published>2024-10-29T15:19:25.000Z</published>
    <updated>2024-10-31T03:09:57.606Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>[!IMPORTANT]</p><p>inline_hook 一般的想法就是替换某个函数的第1个汇编命令 改成 jmp 目标函数的想法</p><p>另外需要注意的是      hook 函数与被hook处的函数 的 调用类型 要相同</p></blockquote><h2 id="1-x86-下的Inline-hook"><a href="#1-x86-下的Inline-hook" class="headerlink" title="1.x86 下的Inline hook"></a>1.x86 下的Inline hook</h2><p>x86 下 一般都是使用jmp 指令  ： 5个字节 （0xE9 ** ** ** ** ) 后面四个字节就是偏移地址</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> WINAPI <span class="title">hookMessageBox</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    _In_opt_ HWND hWnd,</span></span></span><br><span class="line"><span class="params"><span class="function">    _In_opt_ LPCWSTR lpText,</span></span></span><br><span class="line"><span class="params"><span class="function">    _In_opt_ LPCWSTR lpCaption,</span></span></span><br><span class="line"><span class="params"><span class="function">    _In_ UINT uType)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s;%s\n&quot;</span>, lpText, lpCaption);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">inlinehook</span><span class="params">(<span class="type">void</span>* target, <span class="type">void</span>* hook_address)</span> </span>&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> jump_hook[<span class="number">10</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">    jump_hook[<span class="number">0</span>] = <span class="number">0xE9</span>;</span><br><span class="line">    <span class="type">int</span> offest = (<span class="type">int</span>)hook_address - (<span class="built_in">int</span>(target) + <span class="number">5</span>);</span><br><span class="line">    *(<span class="type">int</span>*)&amp;jump_hook[<span class="number">1</span>] = offest;</span><br><span class="line">    DWORD oldprotect = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">VirtualProtect</span>(target, <span class="number">4096</span>, PAGE_EXECUTE_READWRITE, &amp;oldprotect);</span><br><span class="line">    <span class="built_in">memcpy</span>(target, jump_hook, <span class="number">5</span>);</span><br><span class="line">    <span class="built_in">VirtualProtect</span>(target, <span class="number">4096</span>, PAGE_EXECUTE_READWRITE, &amp;oldprotect);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">inlinehook</span>(MessageBoxA, hookMessageBox);</span><br><span class="line">    <span class="comment">//void* targetFunction = (void*)MessageBoxA;</span></span><br><span class="line">    <span class="comment">//void* p2 = (void*)hookMessageBox;</span></span><br><span class="line">    <span class="comment">//printf(&quot;Address of MessageBoxA: %p\n&quot;, targetFunction);</span></span><br><span class="line">    <span class="comment">//printf(&quot;Address of HookMessageBoxA %p\n&quot;, p2);</span></span><br><span class="line">    <span class="built_in">MessageBoxA</span>(<span class="literal">NULL</span>, <span class="string">&quot;hello world!&quot;</span>, <span class="string">&quot;inline_hook&quot;</span>, MB_OK);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2024/10/29/Inline-hook/1.png" class><p><strong>上面这种inline hook 方式 会 使得 target 处的函数不能正确执行 ，一般是使用下面这种 hook 方式</strong></p><img src="/2024/10/29/Inline-hook/3.png" class><h4 id="InlineHook-h"><a href="#InlineHook-h" class="headerlink" title="InlineHook.h"></a>InlineHook.h</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">unsigned</span> <span class="type">char</span> byte;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">signed</span> <span class="type">char</span> <span class="type">int8_t</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">unsigned</span> <span class="type">char</span> <span class="type">uint8_t</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">short</span> <span class="type">int16_t</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">unsigned</span> <span class="type">short</span> <span class="type">uint16_t</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> <span class="type">int32_t</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">unsigned</span> <span class="type">int</span> <span class="type">uint32_t</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> <span class="type">int64_t</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> <span class="type">uint64_t</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">uint32_t</span> <span class="type">boolean_t</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">_HOOK_STUB</span></span><br><span class="line">&#123;</span><br><span class="line">byte jz[<span class="number">2</span>];</span><br><span class="line">byte jnz[<span class="number">2</span>];</span><br><span class="line">byte flag[<span class="number">4</span>];</span><br><span class="line">byte nop[<span class="number">5</span>];</span><br><span class="line">byte jmp_handler[<span class="number">5</span>];</span><br><span class="line">byte origin_code[<span class="number">15</span>];</span><br><span class="line">byte jmp_origin_fun[<span class="number">5</span>];</span><br><span class="line">byte flag2[<span class="number">4</span>];</span><br><span class="line">&#125;HOOK_STUB, *PHOOK_STUB;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CInlineHook</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">CInlineHook</span>();</span><br><span class="line">~<span class="built_in">CInlineHook</span>();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">InstallHook</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* ModuleName, <span class="type">const</span> <span class="type">char</span>* ApiName, <span class="type">void</span>* HandlerAddress)</span></span>;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">InstallHook</span><span class="params">(<span class="type">void</span>* TargetAddress, <span class="type">void</span>* HandlerAddress)</span></span>;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">UninstallHook</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span>* <span class="title">GetOriginFunction</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> m_OriginFunction;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 获取汇编指令长度，用于HOOK</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">int</span> <span class="title">InstructLen</span><span class="params">(<span class="type">void</span>* Address)</span></span>;</span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="type">uint8_t</span> c_opinfo[<span class="number">256</span>];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">InitHookStub</span><span class="params">(PHOOK_STUB HookStub)</span></span>;</span><br><span class="line"></span><br><span class="line">PHOOK_STUB m_HookStub;</span><br><span class="line"><span class="type">void</span>* m_OriginFunction;</span><br><span class="line"><span class="type">void</span>* m_TargetAddress;</span><br><span class="line"><span class="type">int</span> m_HookLen;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="InlineHook-cpp"><a href="#InlineHook-cpp" class="headerlink" title="InlineHook.cpp"></a>InlineHook.cpp</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;InlineHook.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* info structure:</span></span><br><span class="line"><span class="comment">*0x26 means: 6 2 (high-low, low-high)</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* Bit 0:</span></span><br><span class="line"><span class="comment">*1 - has ModR/M</span></span><br><span class="line"><span class="comment">*0 - no ModR/M byte</span></span><br><span class="line"><span class="comment">* Bit 1~3:</span></span><br><span class="line"><span class="comment">*0 - no imm</span></span><br><span class="line"><span class="comment">*1 - Ib, Jb</span></span><br><span class="line"><span class="comment">*2 - Iw</span></span><br><span class="line"><span class="comment">*3 - Iv, Iz, Jz</span></span><br><span class="line"><span class="comment">*4 - Ib + Iw</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* special cases:</span></span><br><span class="line"><span class="comment">*1. group f6xx, f7xx: nnn = 000,001 -- uses Iz</span></span><br><span class="line"><span class="comment">*2. 9a, ea: Ap (xxxx:xxxxxxxx), 6-byte imm</span></span><br><span class="line"><span class="comment">*3. Ob, Ov: 4-byte long offset</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">uint8_t</span> CInlineHook::c_opinfo[<span class="number">256</span>] = &#123;</span><br><span class="line"><span class="comment">/*        0 1  2 3  4 5  6 7  8 9  A B  C D  E F  */</span></span><br><span class="line"><span class="comment">/*       ---------------------------------------  */</span></span><br><span class="line"><span class="comment">/* 00 */</span> <span class="number">0x11</span>, <span class="number">0x11</span>, <span class="number">0x26</span>, <span class="number">0x00</span>, <span class="number">0x11</span>, <span class="number">0x11</span>, <span class="number">0x26</span>, <span class="number">0x00</span>,</span><br><span class="line"><span class="comment">/* 10 */</span> <span class="number">0x11</span>, <span class="number">0x11</span>, <span class="number">0x26</span>, <span class="number">0x00</span>, <span class="number">0x11</span>, <span class="number">0x11</span>, <span class="number">0x26</span>, <span class="number">0x00</span>,</span><br><span class="line"><span class="comment">/* 20 */</span> <span class="number">0x11</span>, <span class="number">0x11</span>, <span class="number">0x26</span>, <span class="number">0x00</span>, <span class="number">0x11</span>, <span class="number">0x11</span>, <span class="number">0x26</span>, <span class="number">0x00</span>,</span><br><span class="line"><span class="comment">/* 30 */</span> <span class="number">0x11</span>, <span class="number">0x11</span>, <span class="number">0x26</span>, <span class="number">0x00</span>, <span class="number">0x11</span>, <span class="number">0x11</span>, <span class="number">0x26</span>, <span class="number">0x00</span>,</span><br><span class="line"><span class="comment">/* 40 */</span> <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line"><span class="comment">/* 50 */</span> <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line"><span class="comment">/* 60 */</span> <span class="number">0x00</span>, <span class="number">0x11</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x67</span>, <span class="number">0x23</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line"><span class="comment">/* 70 */</span> <span class="number">0x22</span>, <span class="number">0x22</span>, <span class="number">0x22</span>, <span class="number">0x22</span>, <span class="number">0x22</span>, <span class="number">0x22</span>, <span class="number">0x22</span>, <span class="number">0x22</span>,</span><br><span class="line"><span class="comment">/* 80 */</span> <span class="number">0x37</span>, <span class="number">0x33</span>, <span class="number">0x11</span>, <span class="number">0x11</span>, <span class="number">0x11</span>, <span class="number">0x11</span>, <span class="number">0x11</span>, <span class="number">0x11</span>,</span><br><span class="line"><span class="comment">/* 90 */</span> <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line"><span class="comment">/* A0 */</span> <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x26</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line"><span class="comment">/* B0 */</span> <span class="number">0x22</span>, <span class="number">0x22</span>, <span class="number">0x22</span>, <span class="number">0x22</span>, <span class="number">0x66</span>, <span class="number">0x66</span>, <span class="number">0x66</span>, <span class="number">0x66</span>,</span><br><span class="line"><span class="comment">/* C0 */</span> <span class="number">0x33</span>, <span class="number">0x40</span>, <span class="number">0x11</span>, <span class="number">0x37</span>, <span class="number">0x80</span>, <span class="number">0x40</span>, <span class="number">0x02</span>, <span class="number">0x00</span>,</span><br><span class="line"><span class="comment">/* D0 */</span> <span class="number">0x11</span>, <span class="number">0x11</span>, <span class="number">0x22</span>, <span class="number">0x00</span>, <span class="number">0x11</span>, <span class="number">0x11</span>, <span class="number">0x11</span>, <span class="number">0x11</span>,</span><br><span class="line"><span class="comment">/* E0 */</span> <span class="number">0x22</span>, <span class="number">0x22</span>, <span class="number">0x22</span>, <span class="number">0x22</span>, <span class="number">0x66</span>, <span class="number">0x02</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line"><span class="comment">/* F0 */</span> <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x11</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x11</span>,</span><br><span class="line"><span class="comment">/*        0 1  2 3  4 5  6 7  8 9  A B  C D  E F  */</span></span><br><span class="line"><span class="comment">/*       ---------------------------------------  */</span></span><br><span class="line"><span class="number">0x11</span>, <span class="number">0x11</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x01</span>, <span class="comment">/* 0F 00 */</span></span><br><span class="line"><span class="number">0x11</span>, <span class="number">0x11</span>, <span class="number">0x11</span>, <span class="number">0x11</span>, <span class="number">0x10</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="comment">/* 0F 10 */</span></span><br><span class="line"><span class="number">0x11</span>, <span class="number">0x11</span>, <span class="number">0x10</span>, <span class="number">0x10</span>, <span class="number">0x11</span>, <span class="number">0x11</span>, <span class="number">0x11</span>, <span class="number">0x11</span>, <span class="comment">/* 0F 20 */</span></span><br><span class="line"><span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x10</span>, <span class="number">0x10</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="comment">/* 0F 30 */</span></span><br><span class="line"><span class="number">0x11</span>, <span class="number">0x11</span>, <span class="number">0x11</span>, <span class="number">0x11</span>, <span class="number">0x11</span>, <span class="number">0x11</span>, <span class="number">0x11</span>, <span class="number">0x11</span>, <span class="comment">/* 0F 40 */</span></span><br><span class="line"><span class="number">0x11</span>, <span class="number">0x11</span>, <span class="number">0x11</span>, <span class="number">0x11</span>, <span class="number">0x11</span>, <span class="number">0x11</span>, <span class="number">0x11</span>, <span class="number">0x11</span>, <span class="comment">/* 0F 50 */</span></span><br><span class="line"><span class="number">0x11</span>, <span class="number">0x11</span>, <span class="number">0x11</span>, <span class="number">0x11</span>, <span class="number">0x11</span>, <span class="number">0x11</span>, <span class="number">0x11</span>, <span class="number">0x11</span>, <span class="comment">/* 0F 60 */</span></span><br><span class="line"><span class="number">0x33</span>, <span class="number">0x11</span>, <span class="number">0x11</span>, <span class="number">0x10</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x11</span>, <span class="number">0x11</span>, <span class="comment">/* 0F 70 */</span></span><br><span class="line"><span class="number">0x66</span>, <span class="number">0x66</span>, <span class="number">0x66</span>, <span class="number">0x66</span>, <span class="number">0x66</span>, <span class="number">0x66</span>, <span class="number">0x66</span>, <span class="number">0x66</span>, <span class="comment">/* 0F 80 */</span></span><br><span class="line"><span class="number">0x11</span>, <span class="number">0x11</span>, <span class="number">0x11</span>, <span class="number">0x11</span>, <span class="number">0x11</span>, <span class="number">0x11</span>, <span class="number">0x11</span>, <span class="number">0x11</span>, <span class="comment">/* 0F 90 */</span></span><br><span class="line"><span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x31</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x31</span>, <span class="number">0x11</span>, <span class="comment">/* 0F A0 */</span></span><br><span class="line"><span class="number">0x11</span>, <span class="number">0x11</span>, <span class="number">0x11</span>, <span class="number">0x11</span>, <span class="number">0x00</span>, <span class="number">0x11</span>, <span class="number">0x11</span>, <span class="number">0x11</span>, <span class="comment">/* 0F B0 */</span></span><br><span class="line"><span class="number">0x11</span>, <span class="number">0x31</span>, <span class="number">0x33</span>, <span class="number">0x31</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="comment">/* 0F C0 */</span></span><br><span class="line"><span class="number">0x11</span>, <span class="number">0x11</span>, <span class="number">0x11</span>, <span class="number">0x11</span>, <span class="number">0x11</span>, <span class="number">0x11</span>, <span class="number">0x11</span>, <span class="number">0x11</span>, <span class="comment">/* 0F D0 */</span></span><br><span class="line"><span class="number">0x11</span>, <span class="number">0x11</span>, <span class="number">0x11</span>, <span class="number">0x11</span>, <span class="number">0x11</span>, <span class="number">0x11</span>, <span class="number">0x11</span>, <span class="number">0x11</span>, <span class="comment">/* 0F E0 */</span></span><br><span class="line"><span class="number">0x11</span>, <span class="number">0x11</span>, <span class="number">0x11</span>, <span class="number">0x11</span>, <span class="number">0x11</span>, <span class="number">0x11</span>, <span class="number">0x11</span>, <span class="number">0x10</span>  <span class="comment">/* 0F F0 */</span></span><br><span class="line"><span class="comment">/*        0 1  2 3  4 5  6 7  8 9  A B  C D  E F  */</span></span><br><span class="line"><span class="comment">/*       ---------------------------------------  */</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">cpu_mode_t</span> &#123; cm_legacy = <span class="number">-1</span>, cm_compat = <span class="number">0</span>, cm_64bit = <span class="number">1</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">CInlineHook::InstructLen</span><span class="params">(<span class="type">void</span>* Address)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">cpu_mode_t</span> cm = cm_compat;</span><br><span class="line"><span class="keyword">register</span> <span class="type">uint8_t</span>* p = (<span class="type">uint8_t</span>*)Address;</span><br><span class="line"><span class="keyword">register</span> <span class="type">uint8_t</span> b = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">register</span> <span class="type">boolean_t</span> pre_66 = <span class="literal">false</span>;</span><br><span class="line"><span class="type">uint8_t</span> info;</span><br><span class="line"><span class="keyword">register</span> <span class="type">int</span> tbl_fixup = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">register</span> <span class="type">uint8_t</span> i_info = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">register</span> <span class="type">uint8_t</span> modrm = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!Address)</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">b = *p++;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (b &gt;= <span class="number">0x40</span> &amp;&amp; b &lt;= <span class="number">0x4f</span> &amp;&amp; cm == cm_64bit)</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (b == <span class="number">0x66</span>) &#123;</span><br><span class="line">pre_66 = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (b == <span class="number">0xf0</span> || b == <span class="number">0xf2</span> || b == <span class="number">0xf3</span> ||</span><br><span class="line">b == <span class="number">0x26</span> || b == <span class="number">0x2e</span> || b == <span class="number">0x36</span> ||</span><br><span class="line">b == <span class="number">0x3e</span> || b == <span class="number">0x64</span> || b == <span class="number">0x65</span> ||</span><br><span class="line">b == <span class="number">0x67</span>)</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (b == <span class="number">0x0f</span>) &#123;</span><br><span class="line">b = *p++;</span><br><span class="line">tbl_fixup = <span class="number">128</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">info = c_opinfo[(b &gt;&gt; <span class="number">1</span>) + tbl_fixup];</span><br><span class="line">info = ((b % <span class="number">2</span>) ? info : (info &gt;&gt; <span class="number">4</span>)) &amp; <span class="number">0x0f</span>;</span><br><span class="line">i_info = (info &gt;&gt; <span class="number">1</span>) &amp; <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (info &amp; <span class="number">0x01</span>) &#123;</span><br><span class="line"><span class="comment">/* has modrm */</span></span><br><span class="line">modrm = *p++;</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line"><span class="keyword">register</span> <span class="type">uint8_t</span> sib = <span class="number">0</span>;</span><br><span class="line"><span class="type">boolean_t</span> has_sib = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">register</span> <span class="type">uint8_t</span> tmp = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ((modrm &amp; <span class="number">0xc0</span>) == <span class="number">0xc0</span>)<span class="comment">/* mod == 3 */</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (cm != cm_legacy &amp;&amp; (modrm &amp; <span class="number">0x07</span>) == <span class="number">4</span>) &#123;</span><br><span class="line">has_sib = <span class="literal">true</span>;</span><br><span class="line">sib = *p++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* displacement */</span></span><br><span class="line">tmp = has_sib ? sib : modrm;</span><br><span class="line"><span class="keyword">if</span> (!(modrm &amp; <span class="number">0xc0</span>)) &#123;<span class="comment">/* mod == 00b */</span></span><br><span class="line"><span class="keyword">if</span> ((tmp &amp; <span class="number">0x07</span>) == <span class="number">5</span>)</span><br><span class="line">p += (cm == cm_legacy) ? <span class="number">2</span> : <span class="number">4</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> ((modrm &amp; <span class="number">0xc0</span>) == <span class="number">0x40</span>) &#123;<span class="comment">/* mod == 01b */</span></span><br><span class="line">++p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;<span class="comment">/* mod == 0x10b */</span></span><br><span class="line">p += (cm == cm_legacy) ? <span class="number">2</span> : <span class="number">4</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">while</span> (<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* special cases */</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">register</span> <span class="type">uint8_t</span> tmp = (modrm &amp; <span class="number">0x38</span>) &gt;&gt; <span class="number">3</span>;<span class="comment">/* nnn */</span></span><br><span class="line"><span class="keyword">if</span> (tmp == <span class="number">0</span> || tmp == <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (b == <span class="number">0xf6</span>)</span><br><span class="line">i_info |= <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (b == <span class="number">0xf7</span>)</span><br><span class="line">i_info |= <span class="number">3</span>;<span class="comment">/* Iz */</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (b == <span class="number">0x9a</span> || b == <span class="number">0xea</span>)<span class="comment">/* Ap */</span></span><br><span class="line">p += <span class="number">6</span>;</span><br><span class="line"><span class="keyword">if</span> (b &gt;= <span class="number">0xa0</span> &amp;&amp; b &lt;= <span class="number">0xa3</span>)</span><br><span class="line">p += <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">while</span> (<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* take care of immediate value */</span></span><br><span class="line"><span class="keyword">switch</span> (i_info) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">0</span>:<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:++p; <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:p += <span class="number">2</span>;<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>:p += pre_66 ? <span class="number">2</span> : <span class="number">4</span>; <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">4</span>:p += <span class="number">3</span>;<span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> (<span class="type">int</span>)(p - (<span class="type">uint8_t</span>*)Address);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">CInlineHook::<span class="built_in">CInlineHook</span>()</span><br><span class="line">&#123;</span><br><span class="line">m_HookStub = <span class="literal">NULL</span>;</span><br><span class="line">m_OriginFunction = <span class="literal">NULL</span>;</span><br><span class="line">m_TargetAddress = <span class="literal">NULL</span>;</span><br><span class="line">m_HookLen = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">CInlineHook::~<span class="built_in">CInlineHook</span>()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (m_HookStub)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">delete</span> m_HookStub;</span><br><span class="line">m_HookStub = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">CInlineHook::InitHookStub</span><span class="params">(PHOOK_STUB HookStub)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (HookStub == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">ZeroMemory</span>(HookStub, <span class="built_in">sizeof</span>(HOOK_STUB));</span><br><span class="line">HookStub-&gt;jz[<span class="number">0</span>] = <span class="number">0x74</span>;</span><br><span class="line">HookStub-&gt;jz[<span class="number">1</span>] = <span class="number">0x06</span>;</span><br><span class="line">HookStub-&gt;jnz[<span class="number">0</span>] = <span class="number">0x75</span>;</span><br><span class="line">HookStub-&gt;jnz[<span class="number">1</span>] = <span class="number">0x04</span>;</span><br><span class="line"><span class="built_in">memcpy</span>(HookStub-&gt;flag, <span class="string">&quot;xuan&quot;</span>, <span class="built_in">sizeof</span>(HookStub-&gt;flag));</span><br><span class="line"><span class="built_in">memset</span>(HookStub-&gt;nop, <span class="number">0x90</span>, <span class="built_in">sizeof</span>(HookStub-&gt;nop));</span><br><span class="line">HookStub-&gt;jmp_handler[<span class="number">0</span>] = <span class="number">0xE9</span>;</span><br><span class="line"><span class="built_in">memset</span>(HookStub-&gt;origin_code, <span class="number">0x90</span>, <span class="built_in">sizeof</span>(HookStub-&gt;origin_code));</span><br><span class="line">HookStub-&gt;jmp_origin_fun[<span class="number">0</span>] = <span class="number">0xE9</span>;</span><br><span class="line"><span class="built_in">memcpy</span>(HookStub-&gt;flag2, <span class="string">&quot;yuan&quot;</span>, <span class="built_in">sizeof</span>(HookStub-&gt;flag2));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">CInlineHook::InstallHook</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* ModuleName, <span class="type">const</span> <span class="type">char</span>* ApiName, <span class="type">void</span>* HandlerAddress)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">HMODULE hModule = <span class="literal">NULL</span>;</span><br><span class="line"><span class="type">void</span>* targetAddress = <span class="literal">NULL</span>;</span><br><span class="line"><span class="type">bool</span> bRet = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">do</span> </span><br><span class="line">&#123;</span><br><span class="line">hModule = <span class="built_in">GetModuleHandleA</span>(ModuleName);</span><br><span class="line"><span class="keyword">if</span> (!hModule)</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">targetAddress = <span class="built_in">GetProcAddress</span>(hModule, ApiName);</span><br><span class="line"><span class="keyword">if</span> (!targetAddress)</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">bRet = <span class="built_in">InstallHook</span>(targetAddress, HandlerAddress);</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">while</span> (<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> bRet;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">CInlineHook::InstallHook</span><span class="params">(<span class="type">void</span>* TargetAddress, <span class="type">void</span>* HandlerAddress)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">DWORD OldPageProperty = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (TargetAddress == <span class="literal">NULL</span> || HandlerAddress == <span class="literal">NULL</span> || m_HookStub)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 计算要HOOK的字节长度</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="type">int</span> hook_len = <span class="number">0</span>;</span><br><span class="line"><span class="type">uint8_t</span>* start_address = (<span class="type">uint8_t</span>*)TargetAddress;</span><br><span class="line"><span class="keyword">while</span> (hook_len &lt; <span class="number">5</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> instruct_len = <span class="built_in">InstructLen</span>(start_address);</span><br><span class="line"><span class="keyword">if</span> (instruct_len &lt;= <span class="number">0</span> || instruct_len &gt;= <span class="number">10</span>)</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">hook_len += instruct_len;</span><br><span class="line">start_address += instruct_len;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 分配中间跳指令区，并设置可执行属性</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line">m_HookStub = <span class="keyword">new</span> <span class="built_in">HOOK_STUB</span>();</span><br><span class="line"><span class="keyword">if</span> (m_HookStub == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">VirtualProtect</span>(m_HookStub, <span class="built_in">sizeof</span>(HOOK_STUB), PAGE_EXECUTE_READWRITE, &amp;OldPageProperty))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">delete</span> m_HookStub;</span><br><span class="line">m_HookStub = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 准备hook中间跳转指令</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="built_in">InitHookStub</span>(m_HookStub);</span><br><span class="line"><span class="built_in">memcpy</span>(m_HookStub-&gt;origin_code, TargetAddress, hook_len);</span><br><span class="line">*((<span class="type">unsigned</span> <span class="type">long</span> *)(&amp;m_HookStub-&gt;jmp_handler[<span class="number">1</span>])) = (<span class="type">unsigned</span> <span class="type">long</span>)HandlerAddress - ((<span class="type">unsigned</span> <span class="type">long</span>)&amp;m_HookStub-&gt;jmp_handler + <span class="number">5</span>);</span><br><span class="line">*((<span class="type">unsigned</span> <span class="type">long</span> *)(&amp;m_HookStub-&gt;jmp_origin_fun[<span class="number">1</span>])) = ((<span class="type">unsigned</span> <span class="type">long</span>)TargetAddress + hook_len) - ((<span class="type">unsigned</span> <span class="type">long</span>)&amp;m_HookStub-&gt;jmp_origin_fun + <span class="number">5</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 准备Hook目标入口跳转指令</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line">byte jmp_entry[<span class="number">20</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="built_in">memset</span>(jmp_entry, <span class="number">0x90</span>, <span class="built_in">sizeof</span>(jmp_entry));</span><br><span class="line">jmp_entry[<span class="number">0</span>] = <span class="number">0xE9</span>;</span><br><span class="line">*((<span class="type">unsigned</span> <span class="type">long</span>*)(&amp;jmp_entry[<span class="number">1</span>])) = (<span class="type">unsigned</span> <span class="type">long</span>)m_HookStub - ((<span class="type">unsigned</span> <span class="type">long</span>)TargetAddress + <span class="number">5</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 开始安装钩子</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line">OldPageProperty = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">VirtualProtect</span>(TargetAddress, hook_len, PAGE_READWRITE, &amp;OldPageProperty);</span><br><span class="line"><span class="built_in">memcpy</span>(TargetAddress, jmp_entry, hook_len);</span><br><span class="line"><span class="built_in">VirtualProtect</span>(TargetAddress, hook_len, OldPageProperty, &amp;OldPageProperty);</span><br><span class="line"></span><br><span class="line">m_OriginFunction = &amp;m_HookStub-&gt;origin_code;</span><br><span class="line">m_TargetAddress = TargetAddress;</span><br><span class="line">m_HookLen = hook_len;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">CInlineHook::UninstallHook</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (m_HookStub == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">DWORD OldPageProperty = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">VirtualProtect</span>(m_TargetAddress, m_HookLen, PAGE_READWRITE, &amp;OldPageProperty);</span><br><span class="line"><span class="built_in">memcpy</span>(m_TargetAddress, m_HookStub-&gt;origin_code, m_HookLen);</span><br><span class="line"><span class="built_in">VirtualProtect</span>(m_TargetAddress, m_HookLen, OldPageProperty, &amp;OldPageProperty);</span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span> m_HookStub;</span><br><span class="line">m_HookStub = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Test-cpp"><a href="#Test-cpp" class="headerlink" title="Test.cpp"></a>Test.cpp</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Test.cpp : 定义控制台应用程序的入口点。</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;InlineHook.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line">map&lt;string, CInlineHook*&gt; hookTable;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">int</span> <span class="params">(WINAPI *PFN_MessageBoxA)</span> <span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">  __in_opt HWND hWnd,</span></span></span><br><span class="line"><span class="params"><span class="function">  __in_opt LPCSTR lpText,</span></span></span><br><span class="line"><span class="params"><span class="function">  __in_opt LPCSTR lpCaption,</span></span></span><br><span class="line"><span class="params"><span class="function">  __in UINT uType)</span></span>;</span><br><span class="line"><span class="function"><span class="type">int</span> WINAPI <span class="title">HookMessageBoxA</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">__in_opt HWND hWnd,</span></span></span><br><span class="line"><span class="params"><span class="function">__in_opt LPCSTR lpText,</span></span></span><br><span class="line"><span class="params"><span class="function">__in_opt LPCSTR lpCaption,</span></span></span><br><span class="line"><span class="params"><span class="function">__in UINT uType)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s: %s\n&quot;</span>, lpText, lpCaption);</span><br><span class="line"></span><br><span class="line">CInlineHook* hook = hookTable[<span class="string">&quot;MessageBoxA&quot;</span>];</span><br><span class="line"></span><br><span class="line">PFN_MessageBoxA pfn_MessageBoxA = (PFN_MessageBoxA)hook-&gt;<span class="built_in">GetOriginFunction</span>();</span><br><span class="line"></span><br><span class="line"><span class="built_in">pfn_MessageBoxA</span>(hWnd, lpText, lpCaption, uType);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> _tmain(<span class="type">int</span> argc, _TCHAR* argv[])</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    CInlineHook hook;</span><br><span class="line"></span><br><span class="line">    hook.<span class="built_in">InstallHook</span>(<span class="string">&quot;user32.dll&quot;</span>, <span class="string">&quot;MessageBoxA&quot;</span>, HookMessageBoxA);</span><br><span class="line">hookTable.<span class="built_in">insert</span>(<span class="built_in">pair</span>&lt;string, CInlineHook*&gt;(<span class="string">&quot;MessageBoxA&quot;</span>, &amp;hook));</span><br><span class="line">    </span><br><span class="line"><span class="built_in">MessageBoxA</span>(<span class="literal">NULL</span>, <span class="string">&quot;this is my Blog!&quot;</span>, <span class="string">&quot;@Xhani&quot;</span>, MB_OK);</span><br><span class="line">hookTable[<span class="string">&quot;MessageBoxA&quot;</span>]-&gt;<span class="built_in">UninstallHook</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>此hook 方法不会 影响原函数的正确 执行</strong></p><img src="/2024/10/29/Inline-hook/4.png" class><h6 id="Todo1-编程实现HOOK-WriteFile-这个Windows-API，实现每次调用这个函数的时候，在写入的数据后面增加一个字符串-”xhani-”。然后程序里尝试打开一个文件，并写入一些数据，最后打开文件看看是否有这个字符串内容。"><a href="#Todo1-编程实现HOOK-WriteFile-这个Windows-API，实现每次调用这个函数的时候，在写入的数据后面增加一个字符串-”xhani-”。然后程序里尝试打开一个文件，并写入一些数据，最后打开文件看看是否有这个字符串内容。" class="headerlink" title="Todo1.编程实现HOOK WriteFile 这个Windows API，实现每次调用这个函数的时候，在写入的数据后面增加一个字符串:”xhani!!!”。然后程序里尝试打开一个文件，并写入一些数据，最后打开文件看看是否有这个字符串内容。"></a><em>Todo1.编程实现HOOK WriteFile 这个Windows API，实现每次调用这个函数的时候，在写入的数据后面增加一个字符串:”xhani!!!”。然后程序里尝试打开一个文件，并写入一些数据，最后打开文件看看是否有这个字符串内容。</em></h6><h4 id="Todo1-cpp"><a href="#Todo1-cpp" class="headerlink" title="Todo1.cpp"></a>Todo1.cpp</h4><h6 id="1-方法一"><a href="#1-方法一" class="headerlink" title="1.方法一"></a>1.方法一</h6><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Todo1.cpp : 定义控制台应用程序的入口点。</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;InlineHook.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line">map&lt;string, CInlineHook*&gt; hookTable;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">typedef</span></span></span><br><span class="line"><span class="function"><span class="title">BOOL</span></span></span><br><span class="line"><span class="function"><span class="params">(WINAPI* PFN_WriteFile)</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">_In_ HANDLE hFile,</span></span></span><br><span class="line"><span class="params"><span class="function">_In_reads_bytes_opt_(nNumberOfBytesToWrite) LPCVOID lpBuffer,</span></span></span><br><span class="line"><span class="params"><span class="function">_In_ DWORD nNumberOfBytesToWrite,</span></span></span><br><span class="line"><span class="params"><span class="function">_Out_opt_ LPDWORD lpNumberOfBytesWritten,</span></span></span><br><span class="line"><span class="params"><span class="function">_Inout_opt_ LPOVERLAPPED lpOverlapped)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function">BOOL</span></span><br><span class="line"><span class="function">WINAPI</span></span><br><span class="line"><span class="function"><span class="title">HookWriteFile</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">_In_ HANDLE hFile,</span></span></span><br><span class="line"><span class="params"><span class="function">_In_reads_bytes_opt_(nNumberOfBytesToWrite) LPCVOID lpBuffer,</span></span></span><br><span class="line"><span class="params"><span class="function">_In_ DWORD nNumberOfBytesToWrite,</span></span></span><br><span class="line"><span class="params"><span class="function">_Out_opt_ LPDWORD lpNumberOfBytesWritten,</span></span></span><br><span class="line"><span class="params"><span class="function">_Inout_opt_ LPOVERLAPPED lpOverlapped</span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">CInlineHook* hook = hookTable[<span class="string">&quot;WriteFile&quot;</span>];</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">char</span>  str[] = <span class="string">&quot;Xhani!!!&quot;</span>;</span><br><span class="line"><span class="type">size_t</span> len = <span class="built_in">strlen</span>(str) + nNumberOfBytesToWrite;</span><br><span class="line"><span class="type">char</span> *newbuffer=(<span class="type">char</span> *)<span class="built_in">malloc</span>(len+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span> (newbuffer == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="built_in">memcpy</span>(newbuffer,lpBuffer,nNumberOfBytesToWrite);</span><br><span class="line"><span class="built_in">memcpy</span>(newbuffer+nNumberOfBytesToWrite<span class="number">-1</span>, str, <span class="built_in">strlen</span>(str)+<span class="number">1</span>);</span><br><span class="line">nNumberOfBytesToWrite += <span class="built_in">strlen</span>(str);</span><br><span class="line">    </span><br><span class="line">PFN_WriteFile pfn_WriteFile = (PFN_WriteFile)hook-&gt;<span class="built_in">GetOriginFunction</span>();</span><br><span class="line"></span><br><span class="line"><span class="built_in">pfn_WriteFile</span>(hFile, newbuffer, nNumberOfBytesToWrite, lpNumberOfBytesWritten, lpOverlapped);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> _tmain(<span class="type">int</span> argc, _TCHAR* argv[])</span><br><span class="line">&#123;</span><br><span class="line">HANDLE hFile = <span class="built_in">CreateFile</span>(</span><br><span class="line"><span class="string">L&quot;example.txt&quot;</span>,            <span class="comment">// 文件名</span></span><br><span class="line">GENERIC_WRITE,           <span class="comment">// 写入访问权限</span></span><br><span class="line"><span class="number">0</span>,                       <span class="comment">// 不共享</span></span><br><span class="line"><span class="literal">NULL</span>,                    <span class="comment">// 默认安全性</span></span><br><span class="line">CREATE_ALWAYS,          <span class="comment">// 如果文件存在则覆盖</span></span><br><span class="line">FILE_ATTRIBUTE_NORMAL,   <span class="comment">// 普通文件</span></span><br><span class="line"><span class="literal">NULL</span>                     <span class="comment">// 无模板文件</span></span><br><span class="line">);</span><br><span class="line">CInlineHook hook;</span><br><span class="line">hook.<span class="built_in">InstallHook</span>(<span class="string">&quot;kernel32.dll&quot;</span>, <span class="string">&quot;WriteFile&quot;</span>, HookWriteFile);</span><br><span class="line"></span><br><span class="line">hookTable.<span class="built_in">insert</span>(<span class="built_in">pair</span>&lt;string, CInlineHook*&gt;(<span class="string">&quot;WriteFile&quot;</span>, &amp;hook));</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> buffer[]=<span class="string">&quot;1112211213&quot;</span>;</span><br><span class="line"><span class="comment">//fgets(buffer, sizeof(buffer), stdin);</span></span><br><span class="line">DWORD bytesWritten;</span><br><span class="line"></span><br><span class="line"><span class="built_in">WriteFile</span>(hFile, buffer,<span class="built_in">sizeof</span>(buffer),&amp;bytesWritten,<span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">hookTable[<span class="string">&quot;WriteFile&quot;</span>]-&gt;<span class="built_in">UninstallHook</span>();</span><br><span class="line"><span class="built_in">CloseHandle</span>(hFile);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="2-方法二"><a href="#2-方法二" class="headerlink" title="2.方法二"></a>2.方法二</h6><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用backup  拷贝修改处的指令</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span>* Backup;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BUFFER_SIZE  1024</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">inline_hook</span><span class="params">(<span class="type">void</span>* target, <span class="type">void</span>* hook_address, <span class="type">void</span>* Backup)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">uninstall_hook</span><span class="params">(<span class="type">void</span>* target, <span class="type">void</span>* backup)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function">BOOL WINAPI <span class="title">hookWriteFile</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">     HANDLE hFile,</span></span></span><br><span class="line"><span class="params"><span class="function">    LPCVOID lpBuffer,</span></span></span><br><span class="line"><span class="params"><span class="function">     DWORD nNumberOfBytesToWrite,</span></span></span><br><span class="line"><span class="params"><span class="function">     LPDWORD lpNumberOfBytesWritten,</span></span></span><br><span class="line"><span class="params"><span class="function">     LPOVERLAPPED lpOverlapped</span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">uninstall_hook</span>(WriteFile,Backup);</span><br><span class="line">    </span><br><span class="line">    <span class="type">char</span> str[] = <span class="string">&quot;Xhani!!!!!&quot;</span>;</span><br><span class="line">    <span class="type">size_t</span> NewSize = <span class="built_in">strlen</span>(str) + nNumberOfBytesToWrite;</span><br><span class="line">    <span class="type">char</span>* buffer = (<span class="type">char</span>*)<span class="built_in">malloc</span>(NewSize+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span> (buffer == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="built_in">memcpy</span>(buffer,lpBuffer ,nNumberOfBytesToWrite);</span><br><span class="line">    <span class="built_in">memcpy</span>(buffer + nNumberOfBytesToWrite, str,<span class="built_in">strlen</span>(str)+<span class="number">1</span>);</span><br><span class="line">    nNumberOfBytesToWrite += <span class="built_in">strlen</span>(str);</span><br><span class="line">    </span><br><span class="line">    <span class="type">bool</span> success = <span class="built_in">WriteFile</span>(hFile, buffer, nNumberOfBytesToWrite, lpNumberOfBytesWritten, lpOverlapped);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">inline_hook</span>(WriteFile,hookWriteFile,Backup);<span class="comment">//  安装钩子，确保下次是调用到钩子</span></span><br><span class="line">    <span class="keyword">return</span> success;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">inline_hook</span><span class="params">(<span class="type">void</span>* target, <span class="type">void</span>* hook_address,<span class="type">void</span> *Backup)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> jump_Code[<span class="number">10</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">    jump_Code[<span class="number">0</span>] = <span class="number">0xE9</span>;</span><br><span class="line">    <span class="type">int</span> offest = (<span class="type">int</span>)hook_address - (<span class="type">int</span>)target - <span class="number">5</span>;</span><br><span class="line">    *(<span class="type">int</span>*)&amp;jump_Code[<span class="number">1</span>] = offest;</span><br><span class="line">    DWORD oldproperty = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">VirtualProtect</span>(target, <span class="built_in">sizeof</span>(jump_Code), PAGE_EXECUTE_READWRITE, &amp;oldproperty);</span><br><span class="line">    <span class="built_in">memcpy</span>(Backup, target, <span class="number">5</span>);</span><br><span class="line">    <span class="built_in">memcpy</span>(target, jump_Code, <span class="number">5</span>);</span><br><span class="line">    <span class="built_in">VirtualProtect</span>(target, <span class="built_in">sizeof</span>(jump_Code), oldproperty, &amp;oldproperty);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">uninstall_hook</span><span class="params">(<span class="type">void</span>* target, <span class="type">void</span>* backup)</span> </span>&#123;</span><br><span class="line">    DWORD oldproperty = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">VirtualProtect</span>(target, <span class="number">4096</span>, PAGE_EXECUTE_READWRITE, &amp;oldproperty);</span><br><span class="line">    <span class="built_in">memcpy</span>(target, backup, <span class="number">5</span>);</span><br><span class="line">    <span class="built_in">VirtualProtect</span>(target, <span class="number">4096</span>, oldproperty, &amp;oldproperty);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    HANDLE hFile = <span class="built_in">CreateFile</span>(</span><br><span class="line">        <span class="string">L&quot;example.txt&quot;</span>,            <span class="comment">// 文件名</span></span><br><span class="line">        GENERIC_WRITE,           <span class="comment">// 写入访问权限</span></span><br><span class="line">        <span class="number">0</span>,                       <span class="comment">// 不共享</span></span><br><span class="line">        <span class="literal">NULL</span>,                    <span class="comment">// 默认安全性</span></span><br><span class="line">        CREATE_ALWAYS,          <span class="comment">// 如果文件存在则覆盖</span></span><br><span class="line">        FILE_ATTRIBUTE_NORMAL,   <span class="comment">// 普通文件</span></span><br><span class="line">        <span class="literal">NULL</span>                     <span class="comment">// 无模板文件</span></span><br><span class="line">    );</span><br><span class="line">    Backup = <span class="built_in">malloc</span>(<span class="number">5</span>);</span><br><span class="line">    <span class="keyword">if</span> (hFile != INVALID_HANDLE_VALUE) &#123;</span><br><span class="line">        DWORD bytesWritten; <span class="comment">// 实际写入的字节数</span></span><br><span class="line">        <span class="type">char</span> buffer[] = <span class="string">&quot;123456&quot;</span>;</span><br><span class="line">        <span class="built_in">inline_hook</span>(WriteFile, hookWriteFile,Backup);</span><br><span class="line">        <span class="built_in">WriteFile</span>(hFile, buffer, <span class="built_in">strlen</span>(buffer), &amp;bytesWritten, <span class="literal">NULL</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">CloseHandle</span>(hFile);</span><br><span class="line">    <span class="built_in">free</span>(Backup);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-x64-位下的Inline-hook"><a href="#2-x64-位下的Inline-hook" class="headerlink" title="2.x64 位下的Inline hook"></a>2.x64 位下的Inline hook</h2><h4 id="需要注意的是x64-下的-jmp-指令实际是-14个字节-间接跳转-：-jmp指令-FF-25-offest1-4字节-0ffest2-8字节-因为64位下寻址更慢"><a href="#需要注意的是x64-下的-jmp-指令实际是-14个字节-间接跳转-：-jmp指令-FF-25-offest1-4字节-0ffest2-8字节-因为64位下寻址更慢" class="headerlink" title="需要注意的是x64 下的 jmp 指令实际是 14个字节(间接跳转)  ：  jmp指令(FF 25)+ offest1(4字节)+0ffest2(8字节)  [因为64位下寻址更慢]"></a>需要注意的是x64 下的 jmp 指令实际是 14个字节(<u>间接跳转</u>)  ：  jmp指令(FF 25)+ offest1(4字节)+0ffest2(8字节)  [因为64位下寻址更慢]</h4><blockquote><p>[!NOTE]</p><p><strong>首先是计算出  jmp + offset1 的地址p1 ,然后寻址到p1处，在计算出p1+offest2 ,即为目标地址</strong></p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">sh</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;true&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">sa</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;false&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">inlinehook</span><span class="params">(__int64* target, __int64* hook_address)</span> </span>&#123;</span><br><span class="line">    <span class="type">char</span> jump_hook[<span class="number">14</span>] = &#123;<span class="number">0xFF</span>,<span class="number">0x25</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span> &#125;;</span><br><span class="line">    __int64* p = (_int64*)&amp;hook_address;</span><br><span class="line">    <span class="built_in">memcpy</span>(jump_hook + <span class="number">6</span>,p , <span class="built_in">sizeof</span>(<span class="type">void</span>*));</span><br><span class="line"> <span class="comment">//char jump_hook[] = &#123;0xFF,0x25,0x01,00,00,00,00,00,00,00,00,00,00,00,00 &#125;;</span></span><br><span class="line"> <span class="comment">//__int64* p = (_int64*)&amp;hook_address;</span></span><br><span class="line"> <span class="comment">//memcpy(jump_hook + 7,p , sizeof(void*));</span></span><br><span class="line">    DWORD oldprotect = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">VirtualProtect</span>(target, <span class="built_in">sizeof</span>(jump_hook), PAGE_EXECUTE_READWRITE, &amp;oldprotect);</span><br><span class="line">    <span class="built_in">memcpy</span>(target, jump_hook, <span class="built_in">sizeof</span>(jump_hook));</span><br><span class="line">    <span class="built_in">VirtualProtect</span>(target, <span class="built_in">sizeof</span>(jump_hook), oldprotect, &amp;oldprotect);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">inlinehook</span>((__int64 *)sa,(_int64 *)sh);</span><br><span class="line">    <span class="built_in">sa</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2024/10/29/Inline-hook/2.png" class>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;[!IMPORTANT]&lt;/p&gt;
&lt;p&gt;inline_hook 一般的想法就是替换某个函数的第1个汇编命令 改成 jmp 目标函数的想法&lt;/p&gt;
&lt;p&gt;另外需要注意的是      hook 函数与被hook处的函数 的 调用类型 要相同&lt;/p&gt;
&lt;</summary>
      
    
    
    
    
    <category term="hook" scheme="https://darlingxhani.github.io/tags/hook/"/>
    
  </entry>
  
  <entry>
    <title>常见汇编</title>
    <link href="https://darlingxhani.github.io/2024/09/14/deassembly-md/"/>
    <id>https://darlingxhani.github.io/2024/09/14/deassembly-md/</id>
    <published>2024-09-14T11:38:38.000Z</published>
    <updated>2024-10-30T13:55:25.334Z</updated>
    
    <content type="html"><![CDATA[<h1 id="if-else"><a href="#if-else" class="headerlink" title="if_else:"></a>if_else:</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cmp a,b</span><br><span class="line">je 0x0001</span><br><span class="line">操作2 Yes</span><br><span class="line">jmp 0x0002</span><br><span class="line">0x0001:操作3 NO</span><br><span class="line">0x0002:</span><br></pre></td></tr></table></figure><img src="/2024/09/14/deassembly-md/image-20240914194223239.png" class><h1 id="switch-case"><a href="#switch-case" class="headerlink" title="switch case:"></a>switch case:</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">操作1</span><br><span class="line">cmp  a,400</span><br><span class="line">jg 0x000000</span><br><span class="line">cmp a,400</span><br><span class="line">je 0x000001</span><br><span class="line">cmp a,300</span><br><span class="line">je 0x00002</span><br><span class="line">cmp a,200</span><br><span class="line">je 0x0003</span><br><span class="line">jmp 0x0004           </span><br><span class="line">操作2  </span><br><span class="line">jmp 0x0004         //实际上是有break;</span><br><span class="line">操作3</span><br><span class="line">jmp 0x0004 </span><br><span class="line">操作4</span><br><span class="line">jmp 0x0004</span><br><span class="line">操作5</span><br><span class="line">0x0004:</span><br></pre></td></tr></table></figure><img src="/2024/09/14/deassembly-md/image-20240914194329734.png" class><h1 id="while"><a href="#while" class="headerlink" title="while()"></a>while()</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">0x0000: cmp a,100</span><br><span class="line">      jle 0x00001</span><br><span class="line">操作</span><br><span class="line">jmp 0x0000</span><br><span class="line">0x00001:</span><br></pre></td></tr></table></figure><img src="/2024/09/14/deassembly-md/image-20240914195237570.png" class><h1 id="do-while"><a href="#do-while" class="headerlink" title="do  while()"></a>do  while()</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">0x00001:操作</span><br><span class="line">cmp a,100</span><br><span class="line">jle  0x00001</span><br></pre></td></tr></table></figure><img src="/2024/09/14/deassembly-md/image-20240914195647559.png" class><h1 id="for"><a href="#for" class="headerlink" title="for()"></a>for()</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mov dowrd ptr[ebp-8],1</span><br><span class="line">jmp 0x00001</span><br><span class="line">0x00003:操作</span><br><span class="line">       add/sub/mul/div ecx,dowrd ptr[ebp-8]</span><br><span class="line">0x00001:cmp ecx,dowrd ptr[ebp-8]</span><br><span class="line">jg 0x00002</span><br><span class="line">操作</span><br><span class="line">jmp 0x00003</span><br><span class="line">0x00002:</span><br></pre></td></tr></table></figure><img src="/2024/09/14/deassembly-md/image-20240914195836157.png" class>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;if-else&quot;&gt;&lt;a href=&quot;#if-else&quot; class=&quot;headerlink&quot; title=&quot;if_else:&quot;&gt;&lt;/a&gt;if_else:&lt;/h1&gt;&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td </summary>
      
    
    
    
    
    <category term="汇编" scheme="https://darlingxhani.github.io/tags/%E6%B1%87%E7%BC%96/"/>
    
  </entry>
  
  <entry>
    <title>网络空间搜索引擎2</title>
    <link href="https://darlingxhani.github.io/2024/05/23/%E7%BD%91%E7%BB%9C%E7%A9%BA%E9%97%B4%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E2/"/>
    <id>https://darlingxhani.github.io/2024/05/23/%E7%BD%91%E7%BB%9C%E7%A9%BA%E9%97%B4%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E2/</id>
    <published>2024-05-23T07:36:17.000Z</published>
    <updated>2024-10-30T13:56:48.688Z</updated>
    
    <content type="html"><![CDATA[<h1 id="shodan"><a href="#shodan" class="headerlink" title="shodan"></a>shodan</h1><p>使用文档：<a href="https://xz.aliyun.com/t/2070?time__1311=n4+xnieDqmqqB7DuDBTroGkYDkQG8Y/RB/+eD&alichlgref=https://www.google.com/">https://xz.aliyun.com/t/2070?time__1311=n4%2BxnieDqmqqB7DuDBTroGkYDkQG8Y%2FRB%2F%2BeD&amp;alichlgref=https%3A%2F%2Fwww.google.com%2F</a></p><p>shodan的查询快捷语句：<a href="https://github.com/jakejarvis/awesome-shodan-queries">https://github.com/jakejarvis/awesome-shodan-queries</a></p><p>shodan的py脚本：<a href="https://github.com/random-robbie/My-Shodan-Scripts">https://github.com/random-robbie/My-Shodan-Scripts</a></p><h2 id="1-shodan-io"><a href="#1-shodan-io" class="headerlink" title="1.shodan.io"></a>1.shodan.io</h2><p><strong>shodan搜索使用文档：<a href="https://help.shodan.io/the-basics/search-query-fundamentals">https://help.shodan.io/the-basics/search-query-fundamentals</a></strong></p><p>kali上内置shodan</p><h2 id="2-shodan的功能："><a href="#2-shodan的功能：" class="headerlink" title="2.shodan的功能："></a>2.shodan的功能：</h2><ul><li>地图</li><li>监控</li><li>截图</li><li>过滤器</li></ul><h2 id="3-shodan常见命令："><a href="#3-shodan常见命令：" class="headerlink" title="3.shodan常见命令："></a>3.shodan常见命令：</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shodan host 172.67.167.88</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shodan count apache</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shodan stats port:445 SMB</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;shodan&quot;&gt;&lt;a href=&quot;#shodan&quot; class=&quot;headerlink&quot; title=&quot;shodan&quot;&gt;&lt;/a&gt;shodan&lt;/h1&gt;&lt;p&gt;使用文档：&lt;a href=&quot;https://xz.aliyun.com/t/2070?time__1311=</summary>
      
    
    
    
    
    <category term="web" scheme="https://darlingxhani.github.io/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>网络空间搜索引擎1</title>
    <link href="https://darlingxhani.github.io/2024/05/23/%E7%BD%91%E7%BB%9C%E7%A9%BA%E9%97%B4%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E1/"/>
    <id>https://darlingxhani.github.io/2024/05/23/%E7%BD%91%E7%BB%9C%E7%A9%BA%E9%97%B4%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E1/</id>
    <published>2024-05-23T07:07:23.000Z</published>
    <updated>2024-10-30T13:56:57.121Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-什么是网络空间：Cyber-space"><a href="#1-什么是网络空间：Cyber-space" class="headerlink" title="1.什么是网络空间：Cyber space"></a>1.什么是网络空间：Cyber space</h2><p>搜索引擎：goole诞生————网页</p><p>发展：图片 音乐 声音</p><p>进一步：</p><table><thead><tr><th>网络系统</th><th>网络设备</th><th>工业系统</th></tr></thead><tbody><tr><td>CDN</td><td>手机</td><td>交通信号灯  公园控制系统</td></tr><tr><td>IDS</td><td>平板</td><td>核电站</td></tr><tr><td>CMS</td><td>交换机 路由器 网络摄像头</td><td>加油站</td></tr><tr><td>办公软件</td><td>私人网盘</td><td>电网</td></tr><tr><td>数据库</td><td>打印机  ATM 机器人</td><td>企业大屏幕</td></tr></tbody></table><h2 id="2-网络空间搜索引擎："><a href="#2-网络空间搜索引擎：" class="headerlink" title="2.网络空间搜索引擎："></a>2.网络空间搜索引擎：</h2><h5 id="怎么扫描：1-用网络工具：zmap-nmap-2-方式：IP库-枚举"><a href="#怎么扫描：1-用网络工具：zmap-nmap-2-方式：IP库-枚举" class="headerlink" title="怎么扫描：1.用网络工具：zmap nmap  2.方式：IP库 枚举"></a>怎么扫描：1.用网络工具：zmap nmap  2.方式：IP库 枚举</h5><p>怎么标识设备：</p><ul><li><p>ip:域名</p></li><li><p>MAC</p></li><li><p>爬虫：url</p></li><li><p>开放系统</p></li><li><p>物理地址</p></li><li><p>操作系统</p></li><li><p>设备类型</p></li></ul><h2 id="3-实行威胁地图：fireeye"><a href="#3-实行威胁地图：fireeye" class="headerlink" title="3.实行威胁地图：fireeye"></a>3.实行威胁地图：fireeye</h2><h2 id="4-安全性"><a href="#4-安全性" class="headerlink" title="4.安全性"></a>4.安全性</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1-什么是网络空间：Cyber-space&quot;&gt;&lt;a href=&quot;#1-什么是网络空间：Cyber-space&quot; class=&quot;headerlink&quot; title=&quot;1.什么是网络空间：Cyber space&quot;&gt;&lt;/a&gt;1.什么是网络空间：Cyber space&lt;/</summary>
      
    
    
    
    
    <category term="web" scheme="https://darlingxhani.github.io/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>Google_hacking</title>
    <link href="https://darlingxhani.github.io/2024/05/23/Google-hacking/"/>
    <id>https://darlingxhani.github.io/2024/05/23/Google-hacking/</id>
    <published>2024-05-23T06:12:50.000Z</published>
    <updated>2024-05-23T07:06:23.465Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-语法工具：pdf文档：https-web-archive-org-web-20140822191407-http-www-boris-koch-de-wp-content-uploads-2011-01-Liste-Google-Hacking-pdf"><a href="#1-语法工具：pdf文档：https-web-archive-org-web-20140822191407-http-www-boris-koch-de-wp-content-uploads-2011-01-Liste-Google-Hacking-pdf" class="headerlink" title="1.语法工具：pdf文档：https://web.archive.org/web/20140822191407/http://www.boris-koch.de/wp-content/uploads/2011/01/Liste-Google-Hacking.pdf"></a>1.语法工具：pdf文档：<a href="https://web.archive.org/web/20140822191407/http://www.boris-koch.de/wp-content/uploads/2011/01/Liste-Google-Hacking.pdf">https://web.archive.org/web/20140822191407/http://www.boris-koch.de/wp-content/uploads/2011/01/Liste-Google-Hacking.pdf</a></h2><h2 id="2-一些运算符："><a href="#2-一些运算符：" class="headerlink" title="2.一些运算符："></a>2.一些运算符：</h2><p><strong>完全匹配:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;网络安全&quot;</span><br></pre></td></tr></table></figure><p><strong>任意词语：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1 or 2</span><br></pre></td></tr></table></figure><p><strong>不包含：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">burp_suite - xxx</span><br></pre></td></tr></table></figure><p><strong>数字范围：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">number..number</span><br></pre></td></tr></table></figure><h2 id="3-高级语法"><a href="#3-高级语法" class="headerlink" title="3.高级语法"></a>3.高级语法</h2><p><strong>1.只搜索某个网站的内容：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">site:zhihu.com</span><br></pre></td></tr></table></figure><p><strong>2.网页内容包括：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">allintext:Powered by Discuz</span><br><span class="line">intext：Powered by Discuz</span><br></pre></td></tr></table></figure><h6 id="标题：是html网页标签的标题"><a href="#标题：是html网页标签的标题" class="headerlink" title="标题：是html网页标签的标题"></a>标题：是html网页标签的标题</h6><p> <strong>3.标题出现：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">intitle：</span><br><span class="line">allintitle:</span><br></pre></td></tr></table></figure><p><strong>4.url地址包括：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">allinurl:admin.php</span><br><span class="line">inurl:index.php?id=1</span><br></pre></td></tr></table></figure><p><strong>5.文件类型：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">filetype：pdf</span><br></pre></td></tr></table></figure><p><strong>6.index of</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">intitle:index of</span><br></pre></td></tr></table></figure><h2 id="4-google语法数据库："><a href="#4-google语法数据库：" class="headerlink" title="4.google语法数据库："></a>4.google语法数据库：</h2><p><a href="https://www.exploit-db.com/google-hacking-database">https://www.exploit-db.com/google-hacking-database</a></p><p><a href="https://github.com/BullsEye0/google_dork_list">https://github.com/BullsEye0/google_dork_list</a></p><h2 id="5-工具："><a href="#5-工具：" class="headerlink" title="5.工具："></a>5.工具：</h2><p>github搜索：Google hcaking </p><p>​Google dorks </p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1-语法工具：pdf文档：https-web-archive-org-web-20140822191407-http-www-boris-koch-de-wp-content-uploads-2011-01-Liste-Google-Hacking-pdf&quot;&gt;&lt;a</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>WAF_difference</title>
    <link href="https://darlingxhani.github.io/2024/05/16/WAF_difference/"/>
    <id>https://darlingxhani.github.io/2024/05/16/WAF_difference/</id>
    <published>2024-05-16T07:20:54.000Z</published>
    <updated>2024-10-30T13:56:31.594Z</updated>
    
    <content type="html"><![CDATA[<h1 id="WAF-web应用防火墙"><a href="#WAF-web应用防火墙" class="headerlink" title="WAF:web应用防火墙"></a>WAF:web应用防火墙</h1><h3 id="1-作用（简单的）"><a href="#1-作用（简单的）" class="headerlink" title="1.作用（简单的）"></a>1.作用（简单的）</h3><img src="/2024/05/16/WAF_difference/1.png" class title="image1"><h3 id="2-WAF识别思路："><a href="#2-WAF识别思路：" class="headerlink" title="2.WAF识别思路："></a>2.WAF识别思路：</h3><p>1.<a href="https://github.com/0xInfection/Awesome-WAF">0xInfection&#x2F;Awesome-WAF: 🔥 Web-application firewalls (WAFs) from security standpoint. (github.com)</a></p><p>2.<a href="https://github.com/CSecGroup/wafid">CSecGroup&#x2F;wafid: Wafid identify and fingerprint Web Application Firewall (WAF) products. (github.com)</a></p><h3 id="3-如何触发waf拦截："><a href="#3-如何触发waf拦截：" class="headerlink" title="3.如何触发waf拦截："></a>3.如何触发waf拦截：</h3><h5 id="1-工具：kali-wafw00f"><a href="#1-工具：kali-wafw00f" class="headerlink" title="1.工具：kali:wafw00f"></a>1.工具：kali:wafw00f</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wafw00f https://pinpai.smzdm.com/</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap www.12306.cn --script=http-waf-detect.nse</span><br></pre></td></tr></table></figure><p><strong>必须是动态地址</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -u &quot;xxx.com?id=1&quot; --identify-waf</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;WAF-web应用防火墙&quot;&gt;&lt;a href=&quot;#WAF-web应用防火墙&quot; class=&quot;headerlink&quot; title=&quot;WAF:web应用防火墙&quot;&gt;&lt;/a&gt;WAF:web应用防火墙&lt;/h1&gt;&lt;h3 id=&quot;1-作用（简单的）&quot;&gt;&lt;a href=&quot;#1-作用</summary>
      
    
    
    
    
    <category term="web" scheme="https://darlingxhani.github.io/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>CDN_difference</title>
    <link href="https://darlingxhani.github.io/2024/05/16/CDN-difference/"/>
    <id>https://darlingxhani.github.io/2024/05/16/CDN-difference/</id>
    <published>2024-05-16T06:54:34.000Z</published>
    <updated>2024-10-30T13:57:10.941Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-CDN是什么：CDN图解（秒懂-史上最全）-疯狂创客圈-博客园-cnblogs-com"><a href="#1-CDN是什么：CDN图解（秒懂-史上最全）-疯狂创客圈-博客园-cnblogs-com" class="headerlink" title="1.CDN是什么：CDN图解（秒懂 + 史上最全） - 疯狂创客圈 - 博客园 (cnblogs.com)"></a>1.CDN是什么：<a href="https://www.cnblogs.com/crazymakercircle/p/14978513.html">CDN图解（秒懂 + 史上最全） - 疯狂创客圈 - 博客园 (cnblogs.com)</a></h3><h3 id="2-如何获取CDN背后的真实ip"><a href="#2-如何获取CDN背后的真实ip" class="headerlink" title="2.如何获取CDN背后的真实ip"></a>2.如何获取CDN背后的真实ip</h3><p>1.ping</p><ol start="2"><li></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nslookup 域名</span><br></pre></td></tr></table></figure><p>3.超级ping</p><p>4.Kali工具:lbd</p><p>5.国内：cdn.chinaz.com</p><p>国外cdnplanet.com&#x2F;tools&#x2F;cdnfinder</p><p>6.脚本：</p><p><a href="https://github.com/boy-hack/w8fuckcdn/">https://github.com/boy-hack/w8fuckcdn/</a></p><p><a href="https://gitghub.com/3xp10it/xcdn">https://gitghub.com/3xp10it/xcdn</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;1-CDN是什么：CDN图解（秒懂-史上最全）-疯狂创客圈-博客园-cnblogs-com&quot;&gt;&lt;a href=&quot;#1-CDN是什么：CDN图解（秒懂-史上最全）-疯狂创客圈-博客园-cnblogs-com&quot; class=&quot;headerlink&quot; title=&quot;1.</summary>
      
    
    
    
    
    <category term="web" scheme="https://darlingxhani.github.io/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>CMS_judgement</title>
    <link href="https://darlingxhani.github.io/2024/05/15/CMS-judgement/"/>
    <id>https://darlingxhani.github.io/2024/05/15/CMS-judgement/</id>
    <published>2024-05-15T06:31:50.000Z</published>
    <updated>2024-10-30T13:57:16.932Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CMS的指纹识别"><a href="#CMS的指纹识别" class="headerlink" title="CMS的指纹识别"></a>CMS的指纹识别</h1><h2 id="1-识别对象："><a href="#1-识别对象：" class="headerlink" title="1.识别对象："></a>1.识别对象：</h2><h4 id="1-CMS信息：内容管理系统"><a href="#1-CMS信息：内容管理系统" class="headerlink" title="1.CMS信息：内容管理系统"></a>1.<strong>CMS信息</strong>：内容管理系统</h4><p>2.前端技术：</p><p>3.开发语言</p><p>4.web服务器</p><p>5.应用服务器</p><p>6.操作系统</p><h4 id="7-CDN的信息"><a href="#7-CDN的信息" class="headerlink" title="7.CDN的信息"></a>7.CDN的信息</h4><h4 id="8-WAF信息"><a href="#8-WAF信息" class="headerlink" title="8.WAF信息"></a>8.WAF信息</h4><h2 id="2-CMS："><a href="#2-CMS：" class="headerlink" title="2.CMS："></a>2.CMS：</h2><p>各类开源的CMS：企业，博客，论坛，问答，知识百科，门户建站，在线教育建站，人才招聘网站</p><h2 id="3-CMS识别思路："><a href="#3-CMS识别思路：" class="headerlink" title="3.CMS识别思路："></a>3.CMS识别思路：</h2><h6 id="1-版权信息"><a href="#1-版权信息" class="headerlink" title="1.版权信息"></a>1.版权信息</h6><h6 id="2-特定文件MD5值-https-github-com-Lucifer1993-cmsprint-blob-master-cmsprint-json"><a href="#2-特定文件MD5值-https-github-com-Lucifer1993-cmsprint-blob-master-cmsprint-json" class="headerlink" title="2.特定文件MD5值:(https://github.com/Lucifer1993/cmsprint/blob/master/cmsprint.json)"></a>2.特定文件MD5值:(<a href="https://github.com/Lucifer1993/cmsprint/blob/master/cmsprint.json">https://github.com/Lucifer1993/cmsprint/blob/master/cmsprint.json</a>)</h6><h6 id="3-查看页面原代码-分析代码"><a href="#3-查看页面原代码-分析代码" class="headerlink" title="3.查看页面原代码:分析代码"></a>3.查看页面原代码:分析代码</h6><h6 id="4-查看特定文件分析：如网站的robots-txt文件"><a href="#4-查看特定文件分析：如网站的robots-txt文件" class="headerlink" title="4.查看特定文件分析：如网站的robots .txt文件"></a>4.查看特定文件分析：如网站的robots .txt文件</h6><h2 id="4-CMS工具："><a href="#4-CMS工具：" class="headerlink" title="4.CMS工具："></a>4.CMS工具：</h2><h6 id="1-kali工具：whatweb"><a href="#1-kali工具：whatweb" class="headerlink" title="1.kali工具：whatweb"></a>1.kali工具：whatweb</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">`whatweb  -v www.coolshell.cn`</span><br></pre></td></tr></table></figure><h6 id="2-浏览器插件：Wappalyzer-whatruns"><a href="#2-浏览器插件：Wappalyzer-whatruns" class="headerlink" title="2.浏览器插件：Wappalyzer,whatruns"></a>2.浏览器插件：Wappalyzer,whatruns</h6><h6 id="3-https-github-com-Tuhinshubhra-CMSeek"><a href="#3-https-github-com-Tuhinshubhra-CMSeek" class="headerlink" title="3.https://github.com/Tuhinshubhra/CMSeek"></a>3.<a href="https://github.com/Tuhinshubhra/CMSeek">https://github.com/Tuhinshubhra/CMSeek</a></h6><h6 id="4-http-finger-tidesec-com"><a href="#4-http-finger-tidesec-com" class="headerlink" title="4.http://finger.tidesec.com/"></a>4.<a href="http://finger.tidesec.com/">http://finger.tidesec.com/</a></h6>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;CMS的指纹识别&quot;&gt;&lt;a href=&quot;#CMS的指纹识别&quot; class=&quot;headerlink&quot; title=&quot;CMS的指纹识别&quot;&gt;&lt;/a&gt;CMS的指纹识别&lt;/h1&gt;&lt;h2 id=&quot;1-识别对象：&quot;&gt;&lt;a href=&quot;#1-识别对象：&quot; class=&quot;header</summary>
      
    
    
    
    
    <category term="web" scheme="https://darlingxhani.github.io/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>namp的使用</title>
    <link href="https://darlingxhani.github.io/2024/05/14/Use_nmap/"/>
    <id>https://darlingxhani.github.io/2024/05/14/Use_nmap/</id>
    <published>2024-05-14T08:11:25.000Z</published>
    <updated>2024-10-30T13:56:16.104Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-nmap的使用："><a href="#1-nmap的使用：" class="headerlink" title="1.nmap的使用："></a>1.nmap的使用：<a href="https://blog.csdn.net/weixin_49998039/article/details/125242779"></a></h1><h3 id="1-类别："><a href="#1-类别：" class="headerlink" title="1.类别："></a>1.类别：</h3><p>open:端口开启</p><p>filtered:被防火墙阻止扫描</p><p>closed：端口关闭</p><p>unfiltered：无法确定的</p><h3 id="2-nmap的参数"><a href="#2-nmap的参数" class="headerlink" title="2.nmap的参数"></a>2.nmap的参数</h3><p>nmap -sV:版本检测</p><p>-PN:绕过ping命令</p><p>-O：操作系统检测，1-6</p><p>-T：设置扫描速度</p><p>-sP：主机存活性</p><p>-Ss:SYN方式</p><p>-ST:三次握手</p><p>-SP:没有扫描</p><p>-pn:🈲ping</p><p>-Su:udp的数据包</p><p>-sF:FIN的方式</p><h3 id="3-范围内："><a href="#3-范围内：" class="headerlink" title="3.范围内："></a>3.范围内：</h3><p>192.168.1.1-4</p><h3 id="4-注意其他工具的结合：masscan"><a href="#4-注意其他工具的结合：masscan" class="headerlink" title="4.注意其他工具的结合：masscan:"></a>4.注意其他工具的结合：masscan:<a href="https://blog.csdn.net/2302_82189125/article/details/135999466"></a></h3><p>fofa.info，fofa-view插件</p><h3 id="5-常见端口"><a href="#5-常见端口" class="headerlink" title="5.常见端口"></a>5.常见端口</h3><p>This is a img</p><img src="/2024/05/14/Use_nmap/1.png" class title="image">]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-nmap的使用：&quot;&gt;&lt;a href=&quot;#1-nmap的使用：&quot; class=&quot;headerlink&quot; title=&quot;1.nmap的使用：&quot;&gt;&lt;/a&gt;1.nmap的使用：&lt;a href=&quot;https://blog.csdn.net/weixin_49998039</summary>
      
    
    
    
    
    <category term="web" scheme="https://darlingxhani.github.io/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>端口信息</title>
    <link href="https://darlingxhani.github.io/2024/05/10/%E7%AB%AF%E5%8F%A3%E4%BF%A1%E6%81%AF/"/>
    <id>https://darlingxhani.github.io/2024/05/10/%E7%AB%AF%E5%8F%A3%E4%BF%A1%E6%81%AF/</id>
    <published>2024-05-10T07:45:41.000Z</published>
    <updated>2024-10-30T13:57:50.673Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-端口扫描和代码实现："><a href="#1-端口扫描和代码实现：" class="headerlink" title="1.端口扫描和代码实现："></a>1.端口扫描和代码实现：</h2><p>1.<code>windows :netstat -aon|findstr 3306</code></p><p><code>linux:netstat -an|grep 3306</code></p><p>2.对端口发数据包扫：</p><p>命令：<code>wget ip 80</code></p><p><code>telnet ip 80</code></p><p><code>nc -vz ip 445</code></p><p>3.工具</p><p>扫描主机，端口，探测操作系统，软件版本<strong>zenmap</strong></p><p>nmap 使用文档 </p><p><strong>dirsearch脚本</strong></p><p><strong>masscan</strong></p><p>4.端口类型：</p><p>文件共享：</p><p>远程连接：</p><p>web应用：</p><p>数据库服务</p><p>网路常见端口</p><p>特殊服务端口</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1-端口扫描和代码实现：&quot;&gt;&lt;a href=&quot;#1-端口扫描和代码实现：&quot; class=&quot;headerlink&quot; title=&quot;1.端口扫描和代码实现：&quot;&gt;&lt;/a&gt;1.端口扫描和代码实现：&lt;/h2&gt;&lt;p&gt;1.&lt;code&gt;windows :netstat -aon|</summary>
      
    
    
    
    
    <category term="web" scheme="https://darlingxhani.github.io/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>ip信息收集</title>
    <link href="https://darlingxhani.github.io/2024/05/10/ip%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/"/>
    <id>https://darlingxhani.github.io/2024/05/10/ip%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/</id>
    <published>2024-05-10T07:35:28.000Z</published>
    <updated>2024-10-30T13:57:29.966Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ip信息收集："><a href="#ip信息收集：" class="headerlink" title="ip信息收集："></a>ip信息收集：</h1><h2 id="1-DNS类型"><a href="#1-DNS类型" class="headerlink" title="1.DNS类型"></a>1.DNS类型</h2><h5 id="1-本地域名服务器，根域名服务器，顶级域名，授权域名"><a href="#1-本地域名服务器，根域名服务器，顶级域名，授权域名" class="headerlink" title="1.本地域名服务器，根域名服务器，顶级域名，授权域名"></a>1.本地域名服务器，根域名服务器，顶级域名，授权域名</h5><h5 id="2-迭代查询，递归查询"><a href="#2-迭代查询，递归查询" class="headerlink" title="2.迭代查询，递归查询"></a>2.迭代查询，递归查询</h5><h2 id="2-ping-nslookup"><a href="#2-ping-nslookup" class="headerlink" title="2.ping&#x2F;nslookup"></a>2.ping&#x2F;nslookup</h2><h5 id="ping-应用层"><a href="#ping-应用层" class="headerlink" title="ping:应用层"></a>ping:应用层</h5><p>命令：<code>nslookup -type=&quot;MS&quot; baidu.com</code></p><h2 id="3-IP归属："><a href="#3-IP归属：" class="headerlink" title="3.IP归属："></a>3.IP归属：</h2><p>1.ipwhois.cnnic.cn</p><p>2.ip138.com</p><h2 id="4-CDN服务："><a href="#4-CDN服务：" class="headerlink" title="4.CDN服务："></a>4.CDN服务：</h2><h4 id="要找到CDN背后的真实ip"><a href="#要找到CDN背后的真实ip" class="headerlink" title="要找到CDN背后的真实ip"></a>要找到CDN背后的真实ip</h4><h6 id="1-超级ping"><a href="#1-超级ping" class="headerlink" title="1.超级ping"></a>1.超级ping</h6><h6 id="2-历史DNS-dnshistory"><a href="#2-历史DNS-dnshistory" class="headerlink" title="2.历史DNS:dnshistory"></a>2.历史DNS:dnshistory</h6><h6 id="3-通过子域名"><a href="#3-通过子域名" class="headerlink" title="3.通过子域名"></a>3.通过子域名</h6><h6 id="4-国外主机解析-dnscheck-webpagetest-org"><a href="#4-国外主机解析-dnscheck-webpagetest-org" class="headerlink" title="4.国外主机解析:dnscheck,webpagetest.org"></a>4.国外主机解析:dnscheck,webpagetest.org</h6><h6 id="5-邮件，SSL证书，手机抓包"><a href="#5-邮件，SSL证书，手机抓包" class="headerlink" title="5.邮件，SSL证书，手机抓包"></a>5.邮件，SSL证书，手机抓包</h6>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;ip信息收集：&quot;&gt;&lt;a href=&quot;#ip信息收集：&quot; class=&quot;headerlink&quot; title=&quot;ip信息收集：&quot;&gt;&lt;/a&gt;ip信息收集：&lt;/h1&gt;&lt;h2 id=&quot;1-DNS类型&quot;&gt;&lt;a href=&quot;#1-DNS类型&quot; class=&quot;headerlink</summary>
      
    
    
    
    
    <category term="web" scheme="https://darlingxhani.github.io/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>域名信息收集</title>
    <link href="https://darlingxhani.github.io/2023/11/17/%E5%9F%9F%E5%90%8D%E4%BF%A1%E6%81%AF/"/>
    <id>https://darlingxhani.github.io/2023/11/17/%E5%9F%9F%E5%90%8D%E4%BF%A1%E6%81%AF/</id>
    <published>2023-11-17T08:57:59.000Z</published>
    <updated>2024-10-30T13:57:04.864Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-域名信息"><a href="#1-域名信息" class="headerlink" title="1.域名信息"></a>1.域名信息</h1><h2 id="1-分类："><a href="#1-分类：" class="headerlink" title="1.分类："></a>1.分类：</h2><p>国际域名：com,net,org,gov,edu,mil,int</p><p>国别：cn,uk,us,</p><p>新顶级域名：biz,name,pro,info,coop,museum</p><h2 id="2-域名联系人信息-姓名，邮箱，手机号"><a href="#2-域名联系人信息-姓名，邮箱，手机号" class="headerlink" title="2.域名联系人信息:姓名，邮箱，手机号"></a>2.域名联系人信息:姓名，邮箱，手机号</h2><h3 id="1-域名查询"><a href="#1-域名查询" class="headerlink" title="1.域名查询"></a>1.域名查询</h3><h4 id="1-阿里云"><a href="#1-阿里云" class="headerlink" title="1.阿里云"></a>1.阿里云</h4><h4 id="2-whois-chinaz-com"><a href="#2-whois-chinaz-com" class="headerlink" title="2.whois.chinaz.com"></a>2.whois.chinaz.com</h4><h4 id="3-whoissoft-com"><a href="#3-whoissoft-com" class="headerlink" title="3.whoissoft.com"></a>3.whoissoft.com</h4><h4 id="4-whois-cnnic-cn"><a href="#4-whois-cnnic-cn" class="headerlink" title="4.whois.cnnic.cn"></a>4.whois.cnnic.cn</h4><h4 id="5-kail命令"><a href="#5-kail命令" class="headerlink" title="5.kail命令"></a>5.kail命令</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">whois 域名</span><br></pre></td></tr></table></figure><h3 id="2-域名反差："><a href="#2-域名反差：" class="headerlink" title="2.域名反差："></a>2.域名反差：</h3><h4 id="1-whois-chinaz-com"><a href="#1-whois-chinaz-com" class="headerlink" title="1.whois.chinaz.com"></a>1.whois.chinaz.com</h4><h3 id="3-备案信息"><a href="#3-备案信息" class="headerlink" title="3.备案信息"></a>3.备案信息</h3><h4 id="1-beian-miit-gov-cn"><a href="#1-beian-miit-gov-cn" class="headerlink" title="1.beian.miit.gov.cn"></a>1.beian.miit.gov.cn</h4><h4 id="2-beian88-com"><a href="#2-beian88-com" class="headerlink" title="2.beian88.com"></a>2.beian88.com</h4><h4 id="3-天眼查"><a href="#3-天眼查" class="headerlink" title="3.天眼查"></a>3.天眼查</h4><h3 id="3-子域名："><a href="#3-子域名：" class="headerlink" title="3.子域名："></a>3.子域名：</h3><h4 id="1-例如：news-baidu-com"><a href="#1-例如：news-baidu-com" class="headerlink" title="1.例如：news.baidu.com"></a>1.例如：news.baidu.com</h4><p><strong>工具：1.Layer   2. subDomainsBrute</strong></p><p><strong>字典拆解，枚举</strong></p><h3 id="DNS服务："><a href="#DNS服务：" class="headerlink" title="DNS服务："></a>DNS服务：</h3><p>DNS服务器<br>1.主机记录</p><p>记录类型：A:指定ip地址，CNAME：将一个域名指向另一个域名，AAAA，MX，TXT，NS：域名服务器记录</p><p>2.查询：</p><p><a href="http://dbcha.cn/">域名解析查询(A&#x2F;Txt&#x2F;Cname&#x2F;Mx&#x2F;Srv&#x2F;Aaaa…) (dbcha.cn)</a></p><p>netcraft</p><p>jsons.cn</p><p>kail工具：maltego</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-域名信息&quot;&gt;&lt;a href=&quot;#1-域名信息&quot; class=&quot;headerlink&quot; title=&quot;1.域名信息&quot;&gt;&lt;/a&gt;1.域名信息&lt;/h1&gt;&lt;h2 id=&quot;1-分类：&quot;&gt;&lt;a href=&quot;#1-分类：&quot; class=&quot;headerlink&quot; title=</summary>
      
    
    
    
    
    <category term="web" scheme="https://darlingxhani.github.io/tags/web/"/>
    
  </entry>
  
</feed>
